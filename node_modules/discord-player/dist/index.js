"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target2, value) => __defProp(target2, "name", { value, configurable: true });
var __export = (target2, all) => {
  for (var name in all)
    __defProp(target2, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target2, mod, secondTarget) => (__copyProps(target2, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AF_NIGHTCORE_RATE: () => import_equalizer3.AF_NIGHTCORE_RATE,
  AF_VAPORWAVE_RATE: () => import_equalizer3.AF_VAPORWAVE_RATE,
  AFilterGraph: () => AFilterGraph,
  AsyncQueue: () => AsyncQueue,
  AsyncQueueEntry: () => AsyncQueueEntry,
  AudioFilters: () => AudioFilters,
  AudioPlayer: () => import_discord_voip7.AudioPlayer,
  BASS_EQ_BANDS: () => import_equalizer3.BASS_EQ_BANDS,
  BaseExtractor: () => BaseExtractor,
  BiquadFilterType: () => import_equalizer3.FilterType,
  Context: () => Context,
  DiscordPlayerQueryResultCache: () => DiscordPlayerQueryResultCache,
  EqualizerConfigurationPreset: () => EqualizerConfigurationPreset,
  ExtractorExecutionContext: () => ExtractorExecutionContext,
  FFMPEG_ARGS_PIPED: () => FFMPEG_ARGS_PIPED,
  FFMPEG_ARGS_STRING: () => FFMPEG_ARGS_STRING,
  FFMPEG_SRATE_REGEX: () => FFMPEG_SRATE_REGEX,
  FFmpegFilterer: () => FFmpegFilterer,
  FiltersChain: () => import_equalizer3.FiltersChain,
  GuildNodeManager: () => GuildNodeManager,
  GuildQueue: () => GuildQueue5,
  GuildQueueAudioFilters: () => GuildQueueAudioFilters,
  GuildQueueEvent: () => GuildQueueEvent,
  GuildQueueHistory: () => GuildQueueHistory,
  GuildQueuePlayerNode: () => GuildQueuePlayerNode,
  GuildQueueStatistics: () => GuildQueueStatistics,
  IPBlock: () => IPBlock,
  IPRotator: () => IPRotator,
  LrcLib: () => LrcLib,
  PCMAudioFilters: () => import_equalizer3.AudioFilters,
  Player: () => Player,
  PlayerEvent: () => PlayerEvent,
  PlayerEventsEmitter: () => PlayerEventsEmitter,
  Playlist: () => Playlist,
  Q_BUTTERWORTH: () => import_equalizer3.Q_BUTTERWORTH,
  QueryCache: () => QueryCache,
  QueryResolver: () => QueryResolver,
  QueryType: () => QueryType,
  QueueRepeatMode: () => QueueRepeatMode,
  SearchResult: () => SearchResult,
  SequentialBucket: () => SequentialBucket,
  SerializedType: () => SerializedType,
  StreamDispatcher: () => StreamDispatcher,
  Track: () => Track,
  TrackSkipReason: () => TrackSkipReason,
  TypeUtil: () => TypeUtil,
  Util: () => Util,
  VALIDATE_QUEUE_CAP: () => VALIDATE_QUEUE_CAP,
  VoiceReceiverNode: () => VoiceReceiverNode,
  VoiceUtils: () => VoiceUtils,
  VolumeTransformer: () => import_equalizer3.VolumeTransformer,
  createAudioPlayer: () => import_discord_voip7.createAudioPlayer,
  createContext: () => createContext,
  createFFmpegStream: () => createFFmpegStream,
  createHook: () => createHook,
  decode: () => decode,
  deserialize: () => deserialize,
  encode: () => encode,
  onAfterCreateStream: () => onAfterCreateStream,
  onBeforeCreateStream: () => onBeforeCreateStream,
  serialize: () => serialize,
  tryIntoThumbnailString: () => tryIntoThumbnailString,
  useContext: () => useContext,
  useHistory: () => useHistory,
  useMainPlayer: () => useMainPlayer,
  useMasterPlayer: () => useMasterPlayer,
  useMetadata: () => useMetadata,
  usePlayer: () => usePlayer,
  useQueue: () => useQueue,
  useTimeline: () => useTimeline,
  useVolume: () => useVolume,
  version: () => version
});
module.exports = __toCommonJS(src_exports);
var import_discord6 = require("discord.js");

// src/utils/PlayerEventsEmitter.ts
var import_utils = require("@discord-player/utils");

// src/utils/Util.ts
var import_promises = require("timers/promises");

// src/fabric/Track.ts
var import_discord = require("discord.js");

// src/utils/TypeUtil.ts
var _TypeUtil = class _TypeUtil {
  constructor() {
    return _TypeUtil;
  }
  // eslint-disable-next-line @typescript-eslint/ban-types
  static isFunction(t) {
    return typeof t === "function";
  }
  static isNumber(t) {
    return typeof t === "number" && !isNaN(t);
  }
  static isString(t) {
    return typeof t === "string";
  }
  static isBoolean(t) {
    return typeof t === "boolean";
  }
  static isNullish(t) {
    return t == null;
  }
  static isArray(t) {
    return Array.isArray(t);
  }
  static isError(t) {
    return t instanceof Error;
  }
};
__name(_TypeUtil, "TypeUtil");
var TypeUtil = _TypeUtil;

// src/errors/index.ts
var DiscordPlayerErrors = {
  ERR_OUT_OF_SPACE: {
    name: "ERR_OUT_OF_SPACE",
    type: RangeError,
    createError(target2, capacity, total) {
      return `[${this.name}] Max capacity reached for ${target2} (Capacity ${capacity}/Total ${total})`;
    }
  },
  ERR_INVALID_ARG_TYPE: {
    name: "ERR_INVALID_ARG_TYPE",
    type: TypeError,
    createError(target2, expectation, found) {
      return `[${this.name}] Expected ${target2} to be "${expectation}", received "${found}"`;
    }
  },
  ERR_NO_RESULT: {
    name: "ERR_NO_RESULT",
    type: Error,
    createError(message) {
      return `[${this.name}] ${message}`;
    }
  },
  ERR_NOT_IMPLEMENTED: {
    name: "ERR_NOT_IMPLEMENTED",
    type: Error,
    createError(target2) {
      return `[${this.name}] ${target2} is not yet implemented`;
    }
  },
  ERR_NOT_EXISTING: {
    name: "ERR_NOT_EXISTING",
    type: Error,
    createError(target2) {
      return `[${this.name}] ${target2} does not exist`;
    }
  },
  ERR_OUT_OF_RANGE: {
    name: "ERR_OUT_OF_RANGE",
    type: RangeError,
    createError(target2, value, minimum, maximum) {
      return `[${this.name}] ${target2} is out of range (Expected minimum ${maximum} and maximum ${maximum}, got ${value})`;
    }
  },
  ERR_NO_VOICE_CONNECTION: {
    name: "ERR_NO_VOICE_CONNECTION",
    type: Error,
    createError(message) {
      return `[${this.name}] ` + (message || "No voice connection available, maybe connect to a voice channel first?");
    }
  },
  ERR_VOICE_CONNECTION_DESTROYED: {
    name: "ERR_VOICE_CONNECTION_DESTROYED",
    type: Error,
    createError() {
      return `[${this.name}] Cannot use destroyed voice connection`;
    }
  },
  ERR_NO_VOICE_CHANNEL: {
    name: "ERR_NO_VOICE_CHANNEL",
    type: Error,
    createError() {
      return `[${this.name}] Could not get the voice channel`;
    }
  },
  ERR_INVALID_VOICE_CHANNEL: {
    name: "ERR_INVALID_VOICE_CHANNEL",
    type: Error,
    createError() {
      return `[${this.name}] Expected a voice channel`;
    }
  },
  ERR_NO_RECEIVER: {
    name: "ERR_NO_RECEIVER",
    type: Error,
    createError(message) {
      return `[${this.name}] ` + (message || "No voice receiver is available, maybe connect to a voice channel first?");
    }
  },
  ERR_FFMPEG_LOCATOR: {
    name: "ERR_FFMPEG_LOCATOR",
    type: Error,
    createError(message) {
      return `[${this.name}] ` + message;
    }
  },
  ERR_NO_AUDIO_RESOURCE: {
    name: "ERR_NO_AUDIO_RESOURCE",
    type: Error,
    createError(message) {
      return `[${this.name}] ` + (message || "Expected an audio resource");
    }
  },
  ERR_NO_GUILD_QUEUE: {
    name: "ERR_NO_GUILD_QUEUE",
    type: Error,
    createError(message) {
      return `[${this.name}] ` + (message || "Expected a guild queue");
    }
  },
  ERR_NO_GUILD: {
    name: "ERR_NO_GUILD",
    type: Error,
    createError(message) {
      return `[${this.name}] ` + (message || "Expected a guild");
    }
  },
  ERR_INFO_REQUIRED: {
    name: "ERR_INFO_REQUIRED",
    type: Error,
    createError(target2, actual) {
      return `[${this.name}] Expected ${target2}, found "${actual}"`;
    }
  },
  ERR_SERIALIZATION_FAILED: {
    name: "ERR_SERIALIZATION_FAILED",
    type: Error,
    createError() {
      return `[${this.name}]Don't know how to serialize this data`;
    }
  },
  ERR_DESERIALIZATION_FAILED: {
    name: "ERR_DESERIALIZATION_FAILED",
    type: Error,
    createError() {
      return `[${this.name}]Don't know how to deserialize this data`;
    }
  },
  ERR_ILLEGAL_HOOK_INVOCATION: {
    name: "ERR_ILLEGAL_HOOK_INVOCATION",
    type: Error,
    createError(target2, message) {
      return `[${this.name}] Illegal invocation of ${target2} hook.${message ? ` ${message}` : ""}`;
    }
  }
};
var target = {};
var handler = {
  get(target2, p, receiver) {
    const err = DiscordPlayerErrors[p];
    if (!err)
      return Reflect.get(target2, p, receiver);
    return (...args) => {
      const exception = new err.type(err.createError(...args));
      const originalName = exception.name;
      exception.name = `${err.name} [${originalName}]`;
      return exception;
    };
  }
};
var ErrorCodes = (() => {
  const dict = {};
  for (const prop in DiscordPlayerErrors) {
    dict[prop] = prop;
  }
  return Object.freeze(dict);
})();
var Exceptions = new Proxy(target, handler);

// src/utils/serde.ts
var import_buffer = require("buffer");
var SerializedType = /* @__PURE__ */ ((SerializedType2) => {
  SerializedType2["Track"] = "track";
  SerializedType2["Playlist"] = "playlist";
  return SerializedType2;
})(SerializedType || {});
var isTrack = /* @__PURE__ */ __name((data) => data.$type === "track" /* Track */, "isTrack");
var isPlaylist = /* @__PURE__ */ __name((data) => data.$type === "playlist" /* Playlist */, "isPlaylist");
function serialize(data) {
  if (data instanceof Track)
    return data.serialize();
  if (data instanceof Playlist)
    return data.serialize();
  try {
    return data.toJSON();
  } catch {
    throw Exceptions.ERR_SERIALIZATION_FAILED();
  }
}
__name(serialize, "serialize");
function deserialize(player, data) {
  if (isTrack(data))
    return Track.fromSerialized(player, data);
  if (isPlaylist(data))
    return Playlist.fromSerialized(player, data);
  throw Exceptions.ERR_DESERIALIZATION_FAILED();
}
__name(deserialize, "deserialize");
function encode(data) {
  const str = JSON.stringify(data);
  return import_buffer.Buffer.from(str).toString("base64");
}
__name(encode, "encode");
function decode(data) {
  const str = import_buffer.Buffer.from(data, "base64").toString();
  return JSON.parse(str);
}
__name(decode, "decode");
function tryIntoThumbnailString(data) {
  if (!data)
    return null;
  try {
    if (TypeUtil.isString(data))
      return data;
    return data?.url ?? data?.thumbnail?.url ?? null;
  } catch {
    return null;
  }
}
__name(tryIntoThumbnailString, "tryIntoThumbnailString");

// src/fabric/Track.ts
var _Track = class _Track {
  /**
   * Track constructor
   * @param player The player that instantiated this Track
   * @param data Track data
   */
  constructor(player, data) {
    this.player = player;
    this.requestedBy = null;
    this.queryType = null;
    this.raw = {
      source: "arbitrary"
    };
    this.extractor = null;
    this.id = import_discord.SnowflakeUtil.generate().toString();
    this.__metadata = null;
    this.title = (0, import_discord.escapeMarkdown)(data.title ?? "");
    this.author = data.author ?? "";
    this.url = data.url ?? "";
    this.thumbnail = data.thumbnail ?? "";
    this.duration = data.duration ?? "";
    this.views = data.views ?? 0;
    this.queryType = data.queryType;
    this.requestedBy = data.requestedBy || null;
    this.playlist = data.playlist;
    this.description = `${this.title} by ${this.author}`;
    this.raw = Object.assign({}, { source: data.raw?.source ?? data.source }, data.raw ?? data);
    this.__metadata = data.metadata ?? null;
    this.__reqMetadataFn = data.requestMetadata || (() => Promise.resolve(null));
    this.cleanTitle = data.cleanTitle ?? Util.cleanTitle(this.title, this.source);
  }
  /**
   * Request metadata for this track
   */
  async requestMetadata() {
    const res = await this.__reqMetadataFn();
    this.setMetadata(res);
    return res;
  }
  /**
   * Set metadata for this track
   */
  setMetadata(m) {
    this.__metadata = m;
  }
  /**
   * Metadata of this track
   */
  get metadata() {
    return this.__metadata;
  }
  /**
   * If this track has metadata
   */
  get hasMetadata() {
    return this.metadata != null;
  }
  /**
   * The queue in which this track is located
   */
  get queue() {
    return this.player.nodes.cache.find((q) => q.tracks.some((ab) => ab.id === this.id));
  }
  /**
   * The track duration in millisecond
   */
  get durationMS() {
    const times = /* @__PURE__ */ __name((n, t) => {
      let tn = 1;
      for (let i = 0; i < t; i++)
        tn *= n;
      return t <= 0 ? 1e3 : tn * 1e3;
    }, "times");
    return this.duration.split(":").reverse().map((m, i) => parseInt(m) * times(60, i)).reduce((a, c) => a + c, 0);
  }
  /**
   * Discord hyperlink representation of this track
   */
  toHyperlink() {
    return `[${this.title}](${this.url})`;
  }
  /**
   * Returns source of this track
   */
  get source() {
    return this.raw?.source ?? "arbitrary";
  }
  /**
   * String representation of this track
   */
  toString() {
    return `${this.title} by ${this.author}`;
  }
  /**
   * Raw JSON representation of this track
   */
  toJSON(hidePlaylist) {
    return {
      id: this.id,
      title: this.title,
      description: this.description,
      author: this.author,
      url: this.url,
      thumbnail: this.thumbnail,
      duration: this.duration,
      durationMS: this.durationMS,
      views: this.views,
      requestedBy: this.requestedBy?.id || null,
      playlist: hidePlaylist ? null : this.playlist?.toJSON() ?? null
    };
  }
  /**
   * Serialized track data that can be reconstructed
   */
  serialize() {
    return {
      title: this.title,
      description: this.description,
      author: this.author,
      url: this.url,
      thumbnail: TypeUtil.isString(this.thumbnail) ? this.thumbnail : tryIntoThumbnailString(this.thumbnail),
      duration: this.duration,
      views: this.views ?? 0,
      requested_by: this.requestedBy?.toJSON() ?? null,
      source: this.source,
      live: false,
      query_type: this.queryType,
      extractor: this.extractor?.identifier ?? null,
      metadata: this.metadata,
      $type: "track" /* Track */,
      $encoder_version: "6.6.9"
    };
  }
  /**
   * Construct a track from serialized data
   * @param player Player instance
   * @param data Serialized data
   */
  static fromSerialized(player, data) {
    if (data.$type !== "track" /* Track */)
      throw Exceptions.ERR_INVALID_ARG_TYPE("data", "SerializedTrack", "malformed data");
    const track = new _Track(player, {
      ...data,
      requestedBy: data.requested_by ? (() => {
        const res = data.requested_by;
        try {
          const resolved = player.client.users.resolve(res.id);
          if (resolved)
            return resolved;
          if (player.client.users.cache.has(res.id))
            return player.client.users.cache.get(res.id);
          const user = new import_discord.User(player.client, res);
          return user;
        } catch {
          return null;
        }
      })() : null,
      queryType: data.query_type ?? void 0
    });
    track.setMetadata(data.metadata);
    return track;
  }
  /**
   * Get belonging queues of this track
   */
  getBelongingQueues() {
    const nodes = this.player.nodes.cache.filter((node) => node.tracks.some((t) => t.id === this.id));
    return nodes;
  }
  /**
   * Play this track to the given voice channel. If queue exists and another track is being played, this track will be added to the queue.
   * @param channel Voice channel on which this track shall be played
   * @param options Node initialization options
   */
  async play(channel, options) {
    const fn = this.player.play.bind(this.player);
    return await fn(channel, this, options);
  }
};
__name(_Track, "Track");
var Track = _Track;

// src/fabric/Playlist.ts
var _Playlist = class _Playlist {
  // eslint-disable-line @typescript-eslint/no-explicit-any
  /**
   * Playlist constructor
   * @param {Player} player The player
   * @param {PlaylistInitData} data The data
   */
  constructor(player, data) {
    this.player = player;
    this.tracks = data.tracks ?? [];
    this.author = data.author;
    this.description = data.description;
    this.thumbnail = data.thumbnail;
    this.type = data.type;
    this.source = data.source;
    this.id = data.id;
    this.url = data.url;
    this.title = data.title;
  }
  *[Symbol.iterator]() {
    yield* this.tracks;
  }
  /**
   * Estimated duration of this playlist
   */
  get estimatedDuration() {
    return this.tracks.reduce((p, c) => p + c.durationMS, 0);
  }
  /**
   * Formatted estimated duration of this playlist
   */
  get durationFormatted() {
    return Util.buildTimeCode(Util.parseMS(this.estimatedDuration));
  }
  /**
   * JSON representation of this playlist
   * @param {boolean} [withTracks=true] If it should build json with tracks
   * @returns {PlaylistJSON}
   */
  toJSON(withTracks = true) {
    const payload = {
      id: this.id,
      url: this.url,
      title: this.title,
      description: this.description,
      thumbnail: this.thumbnail,
      type: this.type,
      source: this.source,
      author: this.author,
      tracks: []
    };
    if (withTracks)
      payload.tracks = this.tracks.map((m) => m.toJSON(true));
    return payload;
  }
  /**
   * Serialize this playlist into reconstructable data
   */
  serialize() {
    return {
      tracks: this.tracks.map((m) => m.serialize()),
      title: this.title,
      description: this.description,
      thumbnail: TypeUtil.isString(this.thumbnail) ? this.thumbnail : tryIntoThumbnailString(this.thumbnail),
      type: this.type,
      source: this.source,
      author: this.author,
      id: this.id,
      url: this.url,
      $type: "playlist" /* Playlist */,
      $encoder_version: "6.6.9"
    };
  }
  /**
   * Deserialize this playlist from serialized data
   * @param player Player instance
   * @param data Serialized data
   */
  static fromSerialized(player, data) {
    if (data.$type !== "playlist" /* Playlist */)
      throw Exceptions.ERR_INVALID_ARG_TYPE("data", "SerializedPlaylist", "malformed data");
    return new _Playlist(player, {
      ...data,
      tracks: data.tracks.map((m) => Track.fromSerialized(player, m))
    });
  }
  /**
   * Play this playlist to the given voice channel. If queue exists and another track is being played, this playlist will be added to the queue.
   * @param channel Voice channel on which this playlist shall be played
   * @param options Node initialization options
   */
  async play(channel, options) {
    const fn = this.player.play.bind(this.player);
    return await fn(channel, this, options);
  }
};
__name(_Playlist, "Playlist");
var Playlist = _Playlist;

// src/types/types.ts
var QueryType = {
  AUTO: "auto",
  YOUTUBE: "youtube",
  YOUTUBE_PLAYLIST: "youtubePlaylist",
  SOUNDCLOUD_TRACK: "soundcloudTrack",
  SOUNDCLOUD_PLAYLIST: "soundcloudPlaylist",
  SOUNDCLOUD: "soundcloud",
  SPOTIFY_SONG: "spotifySong",
  SPOTIFY_ALBUM: "spotifyAlbum",
  SPOTIFY_PLAYLIST: "spotifyPlaylist",
  SPOTIFY_SEARCH: "spotifySearch",
  FACEBOOK: "facebook",
  VIMEO: "vimeo",
  ARBITRARY: "arbitrary",
  REVERBNATION: "reverbnation",
  YOUTUBE_SEARCH: "youtubeSearch",
  YOUTUBE_VIDEO: "youtubeVideo",
  SOUNDCLOUD_SEARCH: "soundcloudSearch",
  APPLE_MUSIC_SONG: "appleMusicSong",
  APPLE_MUSIC_ALBUM: "appleMusicAlbum",
  APPLE_MUSIC_PLAYLIST: "appleMusicPlaylist",
  APPLE_MUSIC_SEARCH: "appleMusicSearch",
  FILE: "file",
  AUTO_SEARCH: "autoSearch"
};
var PlayerEvent = /* @__PURE__ */ ((PlayerEvent2) => {
  PlayerEvent2["debug"] = "debug";
  PlayerEvent2["error"] = "error";
  PlayerEvent2["voiceStateUpdate"] = "voiceStateUpdate";
  return PlayerEvent2;
})(PlayerEvent || {});
var QueueRepeatMode = /* @__PURE__ */ ((QueueRepeatMode2) => {
  QueueRepeatMode2[QueueRepeatMode2["OFF"] = 0] = "OFF";
  QueueRepeatMode2[QueueRepeatMode2["TRACK"] = 1] = "TRACK";
  QueueRepeatMode2[QueueRepeatMode2["QUEUE"] = 2] = "QUEUE";
  QueueRepeatMode2[QueueRepeatMode2["AUTOPLAY"] = 3] = "AUTOPLAY";
  return QueueRepeatMode2;
})(QueueRepeatMode || {});

// src/fabric/SearchResult.ts
var _SearchResult = class _SearchResult {
  constructor(player, _data) {
    this.player = player;
    this._data = _data;
    this._data.tracks?.forEach((track) => {
      track.extractor ?? (track.extractor = this._data.extractor || null);
      track.requestedBy ?? (track.requestedBy = _data.requestedBy || null);
    });
  }
  setQueryType(type) {
    this._data.queryType = type;
    return this;
  }
  setRequestedBy(user) {
    this._data.requestedBy = user;
    this._data.tracks?.forEach((track) => {
      track.requestedBy = user;
    });
    return this;
  }
  setExtractor(extractor) {
    this._data.extractor = extractor;
    this._data.tracks?.forEach((track) => {
      track.extractor = extractor;
    });
    return this;
  }
  setTracks(tracks) {
    this._data.tracks = tracks;
    return this;
  }
  setQuery(query) {
    this._data.query = query;
    return this;
  }
  setPlaylist(playlist) {
    this._data.playlist = playlist;
    return this;
  }
  /**
   * The search query
   */
  get query() {
    return this._data.query;
  }
  /**
   * The search query type
   */
  get queryType() {
    return this._data.queryType || QueryType.AUTO;
  }
  /**
   * The extractor
   */
  get extractor() {
    return this._data.extractor || null;
  }
  /**
   * Playlist result
   */
  get playlist() {
    return this._data.playlist;
  }
  /**
   * Tracks result
   */
  get tracks() {
    return this._data.tracks || [];
  }
  /**
   * Requested by
   */
  get requestedBy() {
    return this._data.requestedBy || null;
  }
  /**
   * Re-execute this search
   */
  async execute() {
    return this.player.search(this.query, {
      searchEngine: this.queryType,
      requestedBy: this.requestedBy
    });
  }
  /**
   * If this search result is empty
   */
  isEmpty() {
    return !this.tracks.length;
  }
  /**
   * If this search result has playlist
   */
  hasPlaylist() {
    return this.playlist != null;
  }
  /**
   * If this search result has tracks
   */
  hasTracks() {
    return this.tracks.length > 0;
  }
  /**
   * JSON representation of this search
   */
  toJSON() {
    return {
      query: this.query,
      queryType: this.queryType,
      playlist: this.playlist?.toJSON(false) || null,
      tracks: this.tracks.map((m) => m.toJSON(true)),
      extractor: this.extractor?.identifier || null,
      requestedBy: this.requestedBy?.toJSON() || null
    };
  }
};
__name(_SearchResult, "SearchResult");
var SearchResult = _SearchResult;

// src/utils/AudioFilters.ts
var bass = /* @__PURE__ */ __name((g) => `bass=g=${g}:f=110:w=0.3`, "bass");
var _AudioFilters = class _AudioFilters {
  constructor() {
    return _AudioFilters;
  }
  static get(name) {
    return this.filters[name] ?? name;
  }
  static has(name) {
    return name in this.filters;
  }
  static *[Symbol.iterator]() {
    for (const [k, v] of Object.entries(this.filters)) {
      yield { name: k, value: v };
    }
  }
  static get names() {
    return Object.keys(this.filters);
  }
  // @ts-ignore
  static get length() {
    return this.names.length;
  }
  static toString() {
    return this.names.map((m) => this[m]).join(",");
  }
  /**
   * Create ffmpeg args from the specified filters name
   * @param filter The filter name
   * @returns
   */
  static create(filters) {
    if (!filters || !Array.isArray(filters))
      return this.toString();
    return filters.filter((predicate) => typeof predicate === "string").map((m) => this.get(m)).join(",");
  }
  /**
   * Defines audio filter
   * @param filterName The name of the filter
   * @param value The ffmpeg args
   */
  static define(filterName, value) {
    this.filters[filterName] = value;
  }
  /**
   * Defines multiple audio filters
   * @param filtersArray Array of filters containing the filter name and ffmpeg args
   */
  static defineBulk(filtersArray) {
    filtersArray.forEach((arr) => this.define(arr.name, arr.value));
  }
};
__name(_AudioFilters, "AudioFilters");
_AudioFilters.filters = {
  bassboost_low: bass(15),
  bassboost: bass(20),
  bassboost_high: bass(30),
  "8D": "apulsator=hz=0.09",
  vaporwave: "aresample=48000,asetrate=48000*0.8",
  nightcore: "aresample=48000,asetrate=48000*1.25",
  lofi: "aresample=48000,asetrate=48000*0.9,extrastereo=m=2.5:c=disabled",
  phaser: "aphaser=in_gain=0.4",
  tremolo: "tremolo",
  vibrato: "vibrato=f=6.5",
  reverse: "areverse",
  treble: "treble=g=5",
  normalizer2: "dynaudnorm=g=101",
  normalizer: "acompressor",
  surrounding: "surround",
  pulsator: "apulsator=hz=1",
  subboost: "asubboost",
  karaoke: "stereotools=mlev=0.03",
  flanger: "flanger",
  gate: "agate",
  haas: "haas",
  mcompand: "mcompand",
  mono: "pan=mono|c0=.5*c0+.5*c1",
  mstlr: "stereotools=mode=ms>lr",
  mstrr: "stereotools=mode=ms>rr",
  compressor: "compand=points=-80/-105|-62/-80|-15.4/-15.4|0/-12|20/-7.6",
  expander: "compand=attacks=0:points=-80/-169|-54/-80|-49.5/-64.6|-41.1/-41.1|-25.8/-15|-10.8/-4.5|0/0|20/8.3",
  softlimiter: "compand=attacks=0:points=-80/-80|-12.4/-12.4|-6/-8|0/-6.8|20/-2.8",
  chorus: "chorus=0.7:0.9:55:0.4:0.25:2",
  chorus2d: "chorus=0.6:0.9:50|60:0.4|0.32:0.25|0.4:2|1.3",
  chorus3d: "chorus=0.5:0.9:50|60|40:0.4|0.32|0.3:0.25|0.4|0.3:2|2.3|1.3",
  fadein: "afade=t=in:ss=0:d=10",
  dim: `afftfilt="'real=re * (1-clip((b/nb)*b,0,1))':imag='im * (1-clip((b/nb)*b,0,1))'"`,
  earrape: "channelsplit,sidechaingate=level_in=64",
  silenceremove: "silenceremove=1:0:-50dB"
};
var AudioFilters = _AudioFilters;

// src/utils/Util.ts
var import_node_crypto = require("crypto");
var import_metadata_filter = require("@web-scrobbler/metadata-filter");
var _Util = class _Util {
  /**
   * Utils
   */
  constructor() {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  /**
   * Gets the runtime information
   */
  static getRuntime() {
    const version2 = typeof navigator !== "undefined" ? navigator.userAgent : null;
    if (typeof Deno !== "undefined" && Deno.version)
      return { name: "deno", version: Deno.version.deno };
    if (typeof Bun !== "undefined" && Bun.version)
      return { name: "bun", version: Bun.version };
    if (typeof process !== "undefined" && process.version)
      return { name: "node", version: process.version };
    return { name: "unknown", version: version2 ?? "unknown" };
  }
  /**
   * Creates duration string
   * @param {object} durObj The duration object
   * @returns {string}
   */
  static durationString(durObj) {
    return Object.values(durObj).map((m) => isNaN(m) ? 0 : m).join(":");
  }
  /**
   * Parses milliseconds to consumable time object
   * @param {number} milliseconds The time in ms
   * @returns {TimeData}
   */
  static parseMS(milliseconds) {
    if (isNaN(milliseconds))
      milliseconds = 0;
    const round = milliseconds > 0 ? Math.floor : Math.ceil;
    return {
      days: round(milliseconds / 864e5),
      hours: round(milliseconds / 36e5) % 24,
      minutes: round(milliseconds / 6e4) % 60,
      seconds: round(milliseconds / 1e3) % 60
    };
  }
  /**
   * Builds time code
   * @param {TimeData} duration The duration object
   * @returns {string}
   */
  static buildTimeCode(duration) {
    const items = Object.keys(duration);
    const required = ["days", "hours", "minutes", "seconds"];
    const parsed = items.filter((x) => required.includes(x)).map((m) => duration[m]);
    const final = parsed.slice(parsed.findIndex((x) => x !== 0)).map((x) => x.toString().padStart(2, "0")).join(":");
    return final.length <= 3 ? `0:${final.padStart(2, "0") || 0}` : final;
  }
  /**
   * Formats duration
   * @param {number} duration The duration in ms
   */
  static formatDuration(duration) {
    return this.buildTimeCode(this.parseMS(duration));
  }
  /**
   * Picks last item of the given array
   * @param {any[]} arr The array
   * @returns {any}
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static last(arr) {
    if (!Array.isArray(arr))
      return arr;
    return arr[arr.length - 1];
  }
  /**
   * Checks if the voice channel is empty
   * @param {VoiceChannel|StageChannel} channel The voice channel
   * @returns {boolean}
   */
  static isVoiceEmpty(channel) {
    return channel && channel.members.filter((member) => !member.user.bot).size === 0;
  }
  /**
   * Cleans the track title
   * @param title The title
   * @param source The source
   * @returns Cleaned title
   */
  static cleanTitle(title, source) {
    try {
      const filterOpts = {
        // prettier-ignore
        track: [
          import_metadata_filter.removeRemastered,
          import_metadata_filter.removeLive,
          import_metadata_filter.fixTrackSuffix,
          import_metadata_filter.removeZeroWidth,
          import_metadata_filter.replaceNbsp,
          import_metadata_filter.replaceSmartQuotes,
          import_metadata_filter.removeCleanExplicit
        ]
      };
      const spotifyFilter = (0, import_metadata_filter.createFilter)(filterOpts);
      spotifyFilter.extend((0, import_metadata_filter.createSpotifyFilter)());
      const defaultFilter = (0, import_metadata_filter.createFilter)(filterOpts);
      switch (source) {
        case "youtube":
          return (0, import_metadata_filter.youtube)(title);
        case "spotify":
          return spotifyFilter.filterField("track", title);
        default:
          return defaultFilter.filterField("track", title);
      }
    } catch {
      return title;
    }
  }
  /**
   * Safer require
   * @param {string} id Node require id
   * @returns {any}
   */
  static require(id) {
    try {
      return { module: require(id), error: null };
    } catch (error) {
      return { module: null, error };
    }
  }
  static async import(id) {
    try {
      const mod = await import(id);
      return { module: mod, error: null };
    } catch (error) {
      return { module: null, error };
    }
  }
  /**
   * Asynchronous timeout
   * @param {number} time The time in ms to wait
   * @returns {Promise<unknown>}
   */
  static wait(time) {
    return (0, import_promises.setTimeout)(time, void 0, { ref: false });
  }
  static noop() {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  static async getFetch() {
    if ("fetch" in globalThis)
      return globalThis.fetch;
    for (const lib of ["node-fetch", "undici"]) {
      try {
        return await import(lib).then((res) => res.fetch || res.default?.fetch || res.default);
      } catch {
        try {
          const res = require(lib);
          if (res)
            return res.fetch || res.default?.fetch || res.default;
        } catch {
        }
      }
    }
  }
  static warn(message, code = "DeprecationWarning", detail) {
    process.emitWarning(message, {
      code,
      detail
    });
  }
  static randomChoice(src) {
    return src[(0, import_node_crypto.randomInt)(src.length)];
  }
  static arrayCloneShuffle(src) {
    const arr = src.slice();
    let m = arr.length;
    while (m) {
      const i = Math.floor(Math.random() * m--);
      [arr[m], arr[i]] = [arr[i], arr[m]];
    }
    return arr;
  }
};
__name(_Util, "Util");
var Util = _Util;
var VALIDATE_QUEUE_CAP = /* @__PURE__ */ __name((queue, items) => {
  const tracks = items instanceof Playlist ? items.tracks : Array.isArray(items) ? items : [items];
  if (queue.maxSize < 1 || queue.maxSize === Infinity)
    return;
  const maxCap = queue.getCapacity();
  if (maxCap < tracks.length) {
    throw Exceptions.ERR_OUT_OF_SPACE("tracks queue", maxCap, tracks.length);
  }
}, "VALIDATE_QUEUE_CAP");

// src/utils/PlayerEventsEmitter.ts
var _hasDebugger;
var _PlayerEventsEmitter = class _PlayerEventsEmitter extends import_utils.EventEmitter {
  constructor(requiredEvents = []) {
    super();
    this.requiredEvents = requiredEvents;
    __privateAdd(this, _hasDebugger, false);
  }
  on(name, listener) {
    if (name === "debug") {
      __privateSet(this, _hasDebugger, true);
    }
    return super.on(name, listener);
  }
  once(name, listener) {
    if (name === "debug") {
      __privateSet(this, _hasDebugger, true);
    }
    return super.once(name, listener);
  }
  addListener(name, listener) {
    if (name === "debug") {
      __privateSet(this, _hasDebugger, true);
    }
    return super.addListener(name, listener);
  }
  off(name, listener) {
    __privateSet(this, _hasDebugger, this.listenerCount("debug") > 0);
    return super.off(name, listener);
  }
  removeListener(name, listener) {
    __privateSet(this, _hasDebugger, this.listenerCount("debug") > 0);
    return super.removeListener(name, listener);
  }
  removeAllListeners(name) {
    __privateSet(this, _hasDebugger, this.listenerCount("debug") > 0);
    return super.removeAllListeners(name);
  }
  emit(name, ...args) {
    if (this.requiredEvents.includes(name) && !this.eventNames().includes(name)) {
      console.error(...args);
      Util.warn(
        `No event listener found for event "${String(name)}". Events ${this.requiredEvents.map((m) => `"${String(m)}"`).join(", ")} must have event listeners.`,
        "UnhandledEventsWarning"
      );
      return false;
    }
    return super.emit(name, ...args);
  }
  get hasDebugger() {
    return __privateGet(this, _hasDebugger);
  }
};
_hasDebugger = new WeakMap();
__name(_PlayerEventsEmitter, "PlayerEventsEmitter");
var PlayerEventsEmitter = _PlayerEventsEmitter;

// src/extractors/BaseExtractor.ts
var _BaseExtractor = class _BaseExtractor {
  /**
   * Extractor constructor
   * @param context Context that instantiated this extractor
   * @param options Initialization options for this extractor
   */
  constructor(context, options = {}) {
    this.context = context;
    this.options = options;
    /**
     * Priority of this extractor. Higher value means higher priority (will be executed first).
     */
    this.priority = 1;
    /**
     * A list of query protocols that this extractor supports.
     */
    this.protocols = [];
    /**
     * Handle bridge query creation
     * @param track The track to build query for
     */
    this.createBridgeQuery = /* @__PURE__ */ __name((track) => `${track.title} by ${track.author} official audio`, "createBridgeQuery");
  }
  /**
   * Identifier of this extractor
   */
  get identifier() {
    return this.constructor.identifier;
  }
  /**
   * Reconfigures this extractor
   * @param options The new options to apply
   */
  async reconfigure(options) {
    this.options = options;
    await this.deactivate();
    await this.activate();
  }
  /**
   * This method will be executed when this extractor is activated
   */
  async activate() {
    return;
  }
  /**
   * This method will be executed when this extractor is deactivated
   */
  async deactivate() {
    return;
  }
  /**
   * Validate incoming query
   * @param query The query to validate
   */
  async validate(query, type) {
    return false;
  }
  /**
   * Stream the given track
   * @param info The track to stream
   */
  async stream(info) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.stream()`);
  }
  /**
   * Handle the given query
   * @param query The query to handle
   */
  async handle(query, context) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.handle()`);
  }
  /**
   * Get related tracks for the given track
   * @param track The track source
   */
  async getRelatedTracks(track, history) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.getRelatedTracks()`);
  }
  /**
   * A stream middleware to handle streams before passing it to the player
   * @param stream The incoming stream
   * @param next The next function
   */
  handlePostStream(stream, next) {
    return next(null, stream);
  }
  /**
   * Dispatch an event to the player
   * @param event The event to dispatch
   * @param args The data to dispatch
   */
  emit(event, ...args) {
    return this.context.player.emit(event, ...args);
  }
  /**
   * Create extractor response
   * @param playlist The playlist
   * @param tracks The track array
   */
  createResponse(playlist, tracks = playlist?.tracks || []) {
    return { playlist: playlist || null, tracks };
  }
  /**
   * Write debug message
   * @param message The debug message
   */
  debug(message) {
    return this.context.player.debug(message);
  }
  /**
   * IP rotator instance, if available
   */
  get routePlanner() {
    return this.context.player.routePlanner;
  }
  /**
   * A flag to indicate `Demuxable` stream support for `opus`/`ogg/opus`/`webm/opus` formats.
   */
  get supportsDemux() {
    return !!this.context.player.options.skipFFmpeg;
  }
};
__name(_BaseExtractor, "BaseExtractor");
/**
 * Identifier for this extractor
 */
_BaseExtractor.identifier = "com.discord-player.extractor";
var BaseExtractor = _BaseExtractor;

// src/extractors/ExtractorExecutionContext.ts
var import_utils2 = require("@discord-player/utils");
var knownExtractorKeys = [
  "SpotifyExtractor",
  "AppleMusicExtractor",
  "SoundCloudExtractor",
  "YouTubeExtractor",
  "VimeoExtractor",
  "ReverbnationExtractor",
  "AttachmentExtractor"
];
var knownExtractorLib = "@discord-player/extractor";
var _ExtractorExecutionContext = class _ExtractorExecutionContext extends PlayerEventsEmitter {
  constructor(player) {
    super(["error"]);
    this.player = player;
    /**
     * The extractors store
     */
    this.store = new import_utils2.Collection();
  }
  /**
   * Load default extractors from `@discord-player/extractor`
   */
  async loadDefault(filter, options) {
    const mod = await Util.import(knownExtractorLib);
    if (mod.error)
      return { success: false, error: mod.error };
    (filter ? knownExtractorKeys.filter(filter) : knownExtractorKeys).forEach((key) => {
      if (!mod.module[key])
        return;
      this.register(mod.module[key], options?.[key] || {});
    });
    return { success: true, error: null };
  }
  /**
   * Validate if the given extractor is registered
   * @param identifier The extractor identifier
   */
  isRegistered(identifier) {
    return this.store.has(identifier);
  }
  /**
   * The size of registered extractors
   */
  get size() {
    return this.store.size;
  }
  /**
   * Get single extractor
   * @param identifier The extractor to get
   */
  get(identifier) {
    return this.store.get(identifier);
  }
  /**
   * Register single extractor
   * @param _extractor The extractor to register
   * @param options Options supplied to the extractor
   */
  async register(_extractor, options) {
    if (typeof _extractor.identifier !== "string" || this.store.has(_extractor.identifier))
      return null;
    const extractor = new _extractor(this, options);
    if (this.player.options.bridgeProvider)
      options.bridgeProvider ?? (options.bridgeProvider = this.player.options.bridgeProvider);
    try {
      this.store.set(_extractor.identifier, extractor);
      if (this.player.hasDebugger)
        this.player.debug(`${_extractor.identifier} extractor loaded!`);
      this.emit("registered", this, extractor);
      await extractor.activate();
      if (this.player.hasDebugger)
        this.player.debug(`${_extractor.identifier} extractor activated!`);
      this.emit("activate", this, extractor);
      return extractor;
    } catch (e) {
      this.store.delete(_extractor.identifier);
      if (this.player.hasDebugger)
        this.player.debug(`${_extractor.identifier} extractor failed to activate! Error: ${e}`);
      this.emit("error", this, extractor, e);
      return null;
    }
  }
  /**
   * Unregister single extractor
   * @param _extractor The extractor to unregister
   */
  async unregister(_extractor) {
    const extractor = typeof _extractor === "string" ? this.store.get(_extractor) : this.store.find((r) => r === _extractor);
    if (!extractor)
      return;
    try {
      const key = extractor.identifier || this.store.findKey((e) => e === extractor);
      this.store.delete(key);
      if (this.player.hasDebugger)
        this.player.debug(`${extractor.identifier} extractor disabled!`);
      this.emit("unregistered", this, extractor);
      await extractor.deactivate();
      if (this.player.hasDebugger)
        this.player.debug(`${extractor.identifier} extractor deactivated!`);
      this.emit("deactivate", this, extractor);
    } catch (e) {
      if (this.player.hasDebugger)
        this.player.debug(`${extractor.identifier} extractor failed to deactivate!`);
      this.emit("error", this, extractor, e);
    }
  }
  /**
   * Unregister all extractors
   */
  async unregisterAll() {
    try {
      await Promise.all(this.store.map((e) => this.unregister(e)));
    } catch {
    }
  }
  /**
   * Run all the extractors
   * @param fn The runner function
   * @param filterBlocked Filter blocked extractors
   */
  async run(fn, filterBlocked = true) {
    const blocked = this.player.options.blockExtractors ?? [];
    if (!this.store.size) {
      Util.warn("Skipping extractors execution since zero extractors were registered", "NoExtractors");
      return;
    }
    const extractors = this.store.sort((a, b) => b.priority - a.priority);
    let err = null, lastExt = null;
    for (const ext of extractors.values()) {
      if (filterBlocked && blocked.some((e) => e === ext.identifier))
        continue;
      if (this.player.hasDebugger)
        this.player.debug(`Executing extractor ${ext.identifier}...`);
      const result = await fn(ext).then(
        (res) => {
          return res;
        },
        (e) => {
          if (this.player.hasDebugger)
            this.player.debug(`Extractor ${ext.identifier} failed with error: ${e}`);
          return TypeUtil.isError(e) ? e : new Error(`${e}`);
        }
      );
      lastExt = ext;
      if (result && !TypeUtil.isError(result)) {
        if (this.player.hasDebugger)
          this.player.debug(`Extractor ${ext.identifier} executed successfully!`);
        return {
          extractor: ext,
          error: null,
          result
        };
      } else if (TypeUtil.isError(result)) {
        err = result;
      }
    }
    if (err)
      return {
        extractor: lastExt,
        error: err,
        result: false
      };
  }
  /**
   * Check if extractor is disabled
   */
  isDisabled(identifier) {
    return this.player.options.blockExtractors?.includes(identifier) ?? false;
  }
  /**
   * Check if extractor is enabled
   */
  isEnabled(identifier) {
    return !this.isDisabled(identifier);
  }
  /**
   * Resolve extractor identifier
   */
  resolveId(resolvable) {
    return typeof resolvable === "string" ? resolvable : resolvable.identifier;
  }
  /**
   * Resolve extractor
   */
  resolve(resolvable) {
    return typeof resolvable === "string" ? this.get(resolvable) : resolvable;
  }
};
__name(_ExtractorExecutionContext, "ExtractorExecutionContext");
var ExtractorExecutionContext = _ExtractorExecutionContext;

// src/queue/GuildNodeManager.ts
var import_utils7 = require("@discord-player/utils");

// src/queue/GuildQueue.ts
var import_discord3 = require("discord.js");
var import_utils5 = require("@discord-player/utils");

// src/VoiceInterface/StreamDispatcher.ts
var import_discord_voip2 = require("discord-voip");
var import_utils3 = require("@discord-player/utils");
var import_equalizer = require("@discord-player/equalizer");

// src/queue/VoiceReceiverNode.ts
var import_stream = require("stream");
var import_discord_voip = require("discord-voip");
var prism = __toESM(require("prism-media"));
var _VoiceReceiverNode = class _VoiceReceiverNode {
  constructor(dispatcher) {
    this.dispatcher = dispatcher;
  }
  createRawTrack(stream, data = {}) {
    data.title ?? (data.title = `Recording ${Date.now()}`);
    return new Track(this.dispatcher.queue.player, {
      author: "Discord",
      description: data.title,
      title: data.title,
      duration: data.duration || "0:00",
      views: 0,
      requestedBy: data.requestedBy,
      thumbnail: data.thumbnail || "https://cdn.discordapp.com/embed/avatars/0.png",
      url: data.url || "https://discord.com",
      source: "arbitrary",
      raw: {
        engine: stream,
        source: "arbitrary"
      }
    });
  }
  /**
   * Merge multiple streams together
   * @param streams The array of streams to merge
   */
  mergeRecordings(streams) {
    throw Exceptions.ERR_NOT_IMPLEMENTED(`${this.constructor.name}.mergeRecordings()`);
  }
  /**
   * Record a user in voice channel
   * @param user The user to record
   * @param options Recording options
   */
  recordUser(user, options = {
    end: import_discord_voip.EndBehaviorType.AfterSilence,
    mode: "pcm",
    silenceDuration: 1e3
  }) {
    const _user = this.dispatcher.queue.player.client.users.resolveId(user);
    const passThrough = new import_stream.PassThrough();
    const receiver = this.dispatcher.voiceConnection.receiver;
    if (!receiver)
      throw Exceptions.ERR_NO_RECEIVER();
    receiver.speaking.on("start", (userId) => {
      if (userId === _user) {
        const receiveStream = receiver.subscribe(_user, {
          end: {
            behavior: options.end || import_discord_voip.EndBehaviorType.AfterSilence,
            duration: options.silenceDuration ?? 1e3
          }
        });
        setImmediate(async () => {
          if (options.mode === "pcm") {
            const pcm = receiveStream.pipe(
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              new (prism.opus || prism.default.opus).Decoder({
                channels: 2,
                frameSize: 960,
                rate: 48e3
              })
            );
            return pcm.pipe(passThrough);
          } else {
            return receiveStream.pipe(passThrough);
          }
        }).unref();
      }
    });
    return passThrough;
  }
};
__name(_VoiceReceiverNode, "VoiceReceiverNode");
var VoiceReceiverNode = _VoiceReceiverNode;

// src/VoiceInterface/StreamDispatcher.ts
var _StreamDispatcher = class _StreamDispatcher extends import_utils3.EventEmitter {
  /**
   * Creates new connection object
   * @param {VoiceConnection} connection The connection
   * @param {VoiceChannel|StageChannel} channel The connected channel
   * @private
   */
  constructor(connection, channel, queue, connectionTimeout = 2e4, audioPlayer) {
    super();
    this.queue = queue;
    this.connectionTimeout = connectionTimeout;
    this.receiver = new VoiceReceiverNode(this);
    this.dsp = new import_equalizer.FiltersChain();
    this.voiceConnection = connection;
    this.audioPlayer = audioPlayer || (0, import_discord_voip2.createAudioPlayer)({
      debug: this.queue.hasDebugger
    });
    this.channel = channel;
    this.voiceConnection.on("debug", (m) => void this.emit("debug", m));
    this.voiceConnection.on("error", (error) => void this.emit("error", error));
    this.audioPlayer.on("debug", (m) => void this.emit("debug", m));
    this.audioPlayer.on("error", (error) => void this.emit("error", error));
    this.dsp.onUpdate = () => {
      if (!this.dsp)
        return;
      if (this.dsp.filters?.filters)
        this.emit("dsp", this.dsp.filters?.filters);
      if (this.dsp.biquad?.filter)
        this.emit("biquad", this.dsp.biquad?.filter);
      if (this.dsp.equalizer)
        this.emit("eqBands", this.dsp.equalizer.getEQ());
      if (this.dsp.volume)
        this.emit("volume", this.dsp.volume.volume);
      if (this.dsp.resampler)
        this.emit("sampleRate", this.dsp.resampler.targetSampleRate);
    };
    this.dsp.onError = (e) => this.emit("error", e);
    this.voiceConnection.on(import_discord_voip2.VoiceConnectionStatus.Disconnected, async (oldState, newState) => {
      if (newState.reason === import_discord_voip2.VoiceConnectionDisconnectReason.Manual) {
        this.destroy();
        return;
      }
      if (newState.reason === import_discord_voip2.VoiceConnectionDisconnectReason.WebSocketClose && newState.closeCode === 4014) {
        try {
          await (0, import_discord_voip2.entersState)(this.voiceConnection, import_discord_voip2.VoiceConnectionStatus.Connecting, this.connectionTimeout);
        } catch {
          try {
            if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Destroyed)
              this.destroy();
          } catch (err) {
            this.emit("error", err);
          }
        }
      } else if (this.voiceConnection.rejoinAttempts < 5) {
        await Util.wait((this.voiceConnection.rejoinAttempts + 1) * 5e3);
        this.voiceConnection.rejoin();
      } else {
        try {
          if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Destroyed)
            this.destroy();
        } catch (err) {
          this.emit("error", err);
        }
      }
    }).on(import_discord_voip2.VoiceConnectionStatus.Destroyed, () => {
      this.end();
      this.queue.emit(GuildQueueEvent.connectionDestroyed, this.queue);
    });
    this.audioPlayer.on("stateChange", (oldState, newState) => {
      if (oldState.status !== import_discord_voip2.AudioPlayerStatus.Paused && newState.status === import_discord_voip2.AudioPlayerStatus.Paused) {
        this.queue.emit(GuildQueueEvent.playerPause, this.queue);
      }
      if (oldState.status === import_discord_voip2.AudioPlayerStatus.Paused && newState.status !== import_discord_voip2.AudioPlayerStatus.Paused) {
        this.queue.emit(GuildQueueEvent.playerResume, this.queue);
      }
      if (newState.status === import_discord_voip2.AudioPlayerStatus.Playing) {
        if (oldState.status === import_discord_voip2.AudioPlayerStatus.Idle || oldState.status === import_discord_voip2.AudioPlayerStatus.Buffering) {
          return this.emit("start", this.audioResource);
        }
      } else if (newState.status === import_discord_voip2.AudioPlayerStatus.Idle && oldState.status !== import_discord_voip2.AudioPlayerStatus.Idle) {
        this.emit("finish", this.audioResource);
        this.dsp.destroy();
        this.audioResource = null;
      }
    });
    this.voiceConnection.subscribe(this.audioPlayer);
  }
  /**
   * Check if the player has been paused manually
   */
  get paused() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Paused;
  }
  set paused(val) {
    val ? this.pause(true) : this.resume();
  }
  /**
   * Whether or not the player is currently paused automatically or manually.
   */
  isPaused() {
    return this.paused || this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.AutoPaused;
  }
  /**
   * Whether or not the player is currently buffering
   */
  isBuffering() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Buffering;
  }
  /**
   * Whether or not the player is currently playing
   */
  isPlaying() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Playing;
  }
  /**
   * Whether or not the player is currently idle
   */
  isIdle() {
    return this.audioPlayer.state.status === import_discord_voip2.AudioPlayerStatus.Idle;
  }
  /**
   * Whether or not the voice connection has been destroyed
   */
  isDestroyed() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Destroyed;
  }
  /**
   * Whether or not the voice connection has been destroyed
   */
  isDisconnected() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Disconnected;
  }
  /**
   * Whether or not the voice connection is ready to play
   */
  isReady() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Ready;
  }
  /**
   * Whether or not the voice connection is signalling
   */
  isSignalling() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Signalling;
  }
  /**
   * Whether or not the voice connection is connecting
   */
  isConnecting() {
    return this.voiceConnection.state.status === import_discord_voip2.VoiceConnectionStatus.Connecting;
  }
  /**
   * Creates stream
   * @param {Readable} src The stream source
   * @param {object} [ops] Options
   * @returns {AudioResource}
   */
  async createStream(src, ops) {
    if (!ops?.disableFilters && this.queue.hasDebugger)
      this.queue.debug("Initiating DSP filters pipeline...");
    const stream = !ops?.disableFilters ? this.dsp.create(src, {
      dsp: {
        filters: ops?.defaultFilters,
        disabled: ops?.disableFilters
      },
      biquad: ops?.biquadFilter ? {
        filter: ops.biquadFilter,
        disabled: ops?.disableBiquad
      } : void 0,
      resampler: {
        targetSampleRate: ops?.sampleRate,
        disabled: ops?.disableResampler
      },
      equalizer: {
        bandMultiplier: ops?.eq,
        disabled: ops?.disableEqualizer
      },
      volume: {
        volume: ops?.volume,
        disabled: ops?.disableVolume
      }
    }) : src;
    if (this.queue.hasDebugger)
      this.queue.debug("Executing onAfterCreateStream hook...");
    const postStream = await this.queue.onAfterCreateStream?.(stream, this.queue).catch(
      () => ({
        stream,
        type: ops?.type ?? import_discord_voip2.StreamType.Arbitrary
      })
    );
    if (this.queue.hasDebugger)
      this.queue.debug("Preparing AudioResource...");
    this.audioResource = (0, import_discord_voip2.createAudioResource)(postStream?.stream ?? stream, {
      inputType: postStream?.type ?? ops?.type ?? import_discord_voip2.StreamType.Arbitrary,
      metadata: ops?.data,
      // volume controls happen from AudioFilter DSP utility
      inlineVolume: false
    });
    return this.audioResource;
  }
  get resampler() {
    return this.dsp?.resampler;
  }
  get filters() {
    return this.dsp?.filters;
  }
  get biquad() {
    return this.dsp?.biquad || null;
  }
  get equalizer() {
    return this.dsp?.equalizer || null;
  }
  /**
   * The player status
   * @type {AudioPlayerStatus}
   */
  get status() {
    return this.audioPlayer.state.status;
  }
  /**
   * Disconnects from voice
   * @returns {void}
   */
  disconnect() {
    try {
      if (this.audioPlayer)
        this.audioPlayer.stop(true);
      if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Destroyed)
        this.voiceConnection.destroy();
    } catch {
    }
  }
  /**
   * Destroys this dispatcher
   */
  destroy() {
    this.disconnect();
    this.audioPlayer.removeAllListeners();
    this.voiceConnection.removeAllListeners();
    this.dsp.destroy();
    this.audioResource = null;
    this.emit("destroyed");
  }
  /**
   * Stops the player
   * @returns {void}
   */
  end() {
    try {
      this.audioPlayer.stop();
      this.dsp.destroy();
    } catch {
    }
  }
  /**
   * Pauses the stream playback
   * @param {boolean} [interpolateSilence=false] If true, the player will play 5 packets of silence after pausing to prevent audio glitches.
   * @returns {boolean}
   */
  pause(interpolateSilence) {
    const success = this.audioPlayer.pause(interpolateSilence);
    return success;
  }
  /**
   * Resumes the stream playback
   * @returns {boolean}
   */
  resume() {
    const success = this.audioPlayer.unpause();
    return success;
  }
  /**
   * Play stream
   * @param {AudioResource<Track>} [resource=this.audioResource] The audio resource to play
   * @param {boolean} [opus=false] Whether or not to use opus
   * @returns {Promise<StreamDispatcher>}
   */
  async playStream(resource = this.audioResource) {
    if (!resource) {
      throw Exceptions.ERR_NO_AUDIO_RESOURCE();
    }
    if (resource.ended) {
      return void this.emit("finish", resource);
    }
    if (!this.audioResource)
      this.audioResource = resource;
    if (this.voiceConnection.state.status !== import_discord_voip2.VoiceConnectionStatus.Ready) {
      try {
        await (0, import_discord_voip2.entersState)(this.voiceConnection, import_discord_voip2.VoiceConnectionStatus.Ready, this.connectionTimeout);
      } catch (err) {
        return void this.emit("error", err);
      }
    }
    try {
      this.audioPlayer.play(resource);
    } catch (e) {
      this.emit("error", e);
    }
    return this;
  }
  /**
   * Sets playback volume
   * @param {number} value The volume amount
   * @returns {boolean}
   */
  setVolume(value) {
    if (!this.dsp.volume)
      return false;
    return this.dsp.volume.setVolume(value);
  }
  /**
   * The current volume
   * @type {number}
   */
  get volume() {
    if (!this.dsp.volume)
      return 100;
    return this.dsp.volume.volume;
  }
  /**
   * The playback time
   * @type {number}
   */
  get streamTime() {
    if (!this.audioResource)
      return 0;
    return this.audioResource.playbackDuration;
  }
};
__name(_StreamDispatcher, "StreamDispatcher");
var StreamDispatcher = _StreamDispatcher;

// src/queue/GuildQueue.ts
var import_discord_voip4 = require("discord-voip");

// src/queue/GuildQueueHistory.ts
var import_utils4 = require("@discord-player/utils");
var _GuildQueueHistory = class _GuildQueueHistory {
  constructor(queue) {
    this.queue = queue;
    this.tracks = new import_utils4.Queue("LIFO");
  }
  /**
   * Current track in the queue
   */
  get currentTrack() {
    return this.queue.dispatcher?.audioResource?.metadata || this.queue.__current;
  }
  /**
   * Next track in the queue
   */
  get nextTrack() {
    return this.queue.tracks.at(0) || null;
  }
  /**
   * Previous track in the queue
   */
  get previousTrack() {
    return this.tracks.at(0) || null;
  }
  /**
   * If history is disabled
   */
  get disabled() {
    return this.queue.options.disableHistory;
  }
  /**
   * Gets the size of the queue
   */
  get size() {
    return this.tracks.size;
  }
  getSize() {
    return this.size;
  }
  /**
   * If history is empty
   */
  isEmpty() {
    return this.tracks.size < 1;
  }
  /**
   * Add track to track history
   * @param track The track to add
   */
  push(track) {
    if (this.disabled)
      return false;
    this.tracks.add(track);
    this.resize();
    return true;
  }
  /**
   * Clear history
   */
  clear() {
    this.tracks.clear();
  }
  /**
   * Play the next track in the queue
   */
  async next() {
    const track = this.nextTrack;
    if (!track) {
      throw Exceptions.ERR_NO_RESULT("No next track in the queue");
    }
    this.queue.node.skip({
      reason: "HISTORY_NEXT_TRACK" /* HistoryNext */,
      description: "Skipped by GuildQueueHistory.next()"
    });
  }
  /**
   * Play the previous track in the queue
   */
  async previous(preserveCurrent = true) {
    const track = this.tracks.dispatch();
    if (!track) {
      throw Exceptions.ERR_NO_RESULT("No previous track in the queue");
    }
    const current = this.currentTrack;
    await this.queue.node.play(track, { queue: false });
    if (current && preserveCurrent)
      this.queue.node.insert(current, 0);
  }
  /**
   * Alias to [GuildQueueHistory].previous()
   */
  back(preserveCurrent = true) {
    return this.previous(preserveCurrent);
  }
  /**
   * Resize history store
   */
  resize() {
    if (!Number.isFinite(this.queue.maxHistorySize))
      return;
    if (this.tracks.store.length < this.queue.maxHistorySize)
      return;
    this.tracks.store.splice(this.queue.maxHistorySize);
  }
};
__name(_GuildQueueHistory, "GuildQueueHistory");
var GuildQueueHistory = _GuildQueueHistory;

// src/queue/GuildQueuePlayerNode.ts
var import_discord_voip3 = require("discord-voip");
var import_stream2 = require("stream");

// src/utils/QueryResolver.ts
var import_undici = require("undici");
var spotifySongRegex = /^https?:\/\/(?:embed\.|open\.)(?:spotify\.com\/)(intl-([a-z]|[A-Z])+\/)?(?:track\/|\?uri=spotify:track:)((\w|-){22})(\?si=.+)?$/;
var spotifyPlaylistRegex = /^https?:\/\/(?:embed\.|open\.)(?:spotify\.com\/)(intl-([a-z]|[A-Z])+\/)?(?:playlist\/|\?uri=spotify:playlist:)((\w|-){22})(\?si=.+)?$/;
var spotifyAlbumRegex = /^https?:\/\/(?:embed\.|open\.)(?:spotify\.com\/)(intl-([a-z]|[A-Z])+\/)?(?:album\/|\?uri=spotify:album:)((\w|-){22})(\?si=.+)?$/;
var vimeoRegex = /^(http|https)?:\/\/(www\.|player\.)?vimeo\.com\/(?:channels\/(?:\w+\/)?|groups\/([^/]*)\/videos\/|video\/|)(\d+)(?:|\/\?)$/;
var reverbnationRegex = /^https:\/\/(www.)?reverbnation.com\/(.+)\/song\/(.+)$/;
var attachmentRegex = /^https?:\/\/.+$/;
var appleMusicSongRegex = /^https?:\/\/music\.apple\.com\/.+?\/(song|album)\/.+?(\/.+?\?i=|\/)([0-9]+)$/;
var appleMusicPlaylistRegex = /^https?:\/\/music\.apple\.com\/.+?\/playlist\/.+\/pl\.(u-|pm-)?[a-zA-Z0-9]+$/;
var appleMusicAlbumRegex = /^https?:\/\/music\.apple\.com\/.+?\/album\/.+\/([0-9]+)$/;
var soundcloudTrackRegex = /^https?:\/\/(m.|www.)?soundcloud.com\/(\w|-)+\/(\w|-)+(.+)?$/;
var soundcloudPlaylistRegex = /^https?:\/\/(m.|www.)?soundcloud.com\/(\w|-)+\/sets\/(\w|-)+(.+)?$/;
var youtubePlaylistRegex = /^https?:\/\/(www.)?youtube.com\/playlist\?list=((PL|FL|UU|LL|RD|OL)[a-zA-Z0-9-_]{16,41})$/;
var youtubeVideoURLRegex = /^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube\.com|youtu.be))(\/(?:[\w-]+\?v=|embed\/|v\/)?)([\w-]+)(\S+)?$/;
var youtubeVideoIdRegex = /^[a-zA-Z0-9-_]{11}$/;
var DomainsMap = {
  YouTube: ["youtube.com", "youtu.be", "music.youtube.com", "gaming.youtube.com", "www.youtube.com", "m.youtube.com"],
  Spotify: ["open.spotify.com", "embed.spotify.com"],
  Vimeo: ["vimeo.com", "player.vimeo.com"],
  ReverbNation: ["reverbnation.com"],
  SoundCloud: ["soundcloud.com"],
  AppleMusic: ["music.apple.com"]
};
var redirectDomains = /* @__PURE__ */ new Set([
  /^https?:\/\/spotify.link\/[A-Za-z0-9]+$/
]);
var _QueryResolver = class _QueryResolver {
  /**
   * Query resolver
   */
  constructor() {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  static get regex() {
    return {
      spotifyAlbumRegex,
      spotifyPlaylistRegex,
      spotifySongRegex,
      vimeoRegex,
      reverbnationRegex,
      attachmentRegex,
      appleMusicAlbumRegex,
      appleMusicPlaylistRegex,
      appleMusicSongRegex,
      soundcloudTrackRegex,
      soundcloudPlaylistRegex,
      youtubePlaylistRegex
    };
  }
  /**
   * Pre-resolve redirect urls
   */
  static async preResolve(query, maxDepth = 5) {
    if (!TypeUtil.isString(query))
      throw Exceptions.ERR_INVALID_ARG_TYPE(query, "string", typeof query);
    for (const domain of redirectDomains) {
      if (domain.test(query)) {
        try {
          const res = await (0, import_undici.fetch)(query, {
            method: "GET",
            redirect: "follow"
          });
          if (!res.ok)
            break;
          if (/^https?:\/\/spotify.app.link\/(.+)$/.test(res.url)) {
            const body = await res.text();
            const target2 = body.split("https://open.spotify.com/track/")[1].split("?si=")[0];
            if (!target2)
              break;
            return `https://open.spotify.com/track/${target2}`;
          }
          return maxDepth < 1 ? res.url : this.preResolve(res.url, maxDepth - 1);
        } catch {
          break;
        }
      }
    }
    return query;
  }
  /**
   * Resolves the given search query
   * @param {string} query The query
   */
  static resolve(query, fallbackSearchEngine = QueryType.AUTO_SEARCH) {
    if (!TypeUtil.isString(query))
      throw Exceptions.ERR_INVALID_ARG_TYPE(query, "string", typeof query);
    if (!query.length)
      throw Exceptions.ERR_INFO_REQUIRED("query", String(query));
    const resolver = /* @__PURE__ */ __name((type, query2) => ({ type, query: query2 }), "resolver");
    try {
      const url = new URL(query);
      if (DomainsMap.YouTube.includes(url.host)) {
        query = query.replace(/(m(usic)?|gaming)\./, "").trim();
        const playlistId = url.searchParams.get("list");
        const videoId = url.searchParams.get("v");
        if (playlistId) {
          if (videoId && playlistId.startsWith("RD"))
            return resolver(QueryType.YOUTUBE_PLAYLIST, `https://www.youtube.com/watch?v=${videoId}&list=${playlistId}`);
          return resolver(QueryType.YOUTUBE_PLAYLIST, `https://www.youtube.com/playlist?list=${playlistId}`);
        }
        if (_QueryResolver.validateId(query) || _QueryResolver.validateURL(query))
          return resolver(QueryType.YOUTUBE_VIDEO, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.Spotify.includes(url.host)) {
        query = query.replace(/intl-([a-zA-Z]+)\//, "");
        if (spotifyPlaylistRegex.test(query))
          return resolver(QueryType.SPOTIFY_PLAYLIST, query);
        if (spotifyAlbumRegex.test(query))
          return resolver(QueryType.SPOTIFY_ALBUM, query);
        if (spotifySongRegex.test(query))
          return resolver(QueryType.SPOTIFY_SONG, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.Vimeo.includes(url.host)) {
        if (vimeoRegex.test(query))
          return resolver(QueryType.VIMEO, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.ReverbNation.includes(url.host)) {
        if (reverbnationRegex.test(query))
          return resolver(QueryType.REVERBNATION, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.SoundCloud.includes(url.host)) {
        if (soundcloudPlaylistRegex.test(query))
          return resolver(QueryType.SOUNDCLOUD_PLAYLIST, query);
        if (soundcloudTrackRegex.test(query))
          return resolver(QueryType.SOUNDCLOUD_TRACK, query);
        return resolver(fallbackSearchEngine, query);
      } else if (DomainsMap.AppleMusic.includes(url.host)) {
        if (appleMusicAlbumRegex.test(query))
          return resolver(QueryType.APPLE_MUSIC_ALBUM, query);
        if (appleMusicPlaylistRegex.test(query))
          return resolver(QueryType.APPLE_MUSIC_PLAYLIST, query);
        if (appleMusicSongRegex.test(query))
          return resolver(QueryType.APPLE_MUSIC_SONG, query);
        return resolver(fallbackSearchEngine, query);
      } else {
        return resolver(QueryType.ARBITRARY, query);
      }
    } catch {
      return resolver(fallbackSearchEngine, query);
    }
  }
  /**
   * Parses vimeo id from url
   * @param {string} query The query
   * @returns {string}
   */
  static getVimeoID(query) {
    return _QueryResolver.resolve(query).type === QueryType.VIMEO ? query.split("/").filter(Boolean).pop() : null;
  }
  static validateId(q) {
    return youtubeVideoIdRegex.test(q);
  }
  static validateURL(q) {
    return youtubeVideoURLRegex.test(q);
  }
};
__name(_QueryResolver, "QueryResolver");
var QueryResolver = _QueryResolver;

// src/queue/GuildQueuePlayerNode.ts
var import_promises2 = require("timers/promises");

// src/utils/AsyncQueue.ts
var import_discord2 = require("discord.js");
var _AsyncQueue = class _AsyncQueue {
  constructor() {
    /**
     * The queued entries
     */
    this.entries = [];
  }
  /**
   * Clear entries queue
   * @param consume Whether or not to consume all entries before clearing
   */
  clear(consume = false) {
    if (consume) {
      this.entries.forEach((entry) => entry.consume());
    }
    this.entries = [];
  }
  /**
   * The total number of entries in this queue. Returns `0` if no entries are available.
   */
  get size() {
    return this.entries.length;
  }
  /**
   * Acquire an entry.
   *
   * @example // lock the queue
   * const entry = asyncQueue.acquire();
   * // wait until previous task is completed
   * await entry.getTask();
   * // do something expensive
   * await performSomethingExpensive();
   * // make sure to release the lock once done
   * asyncQueue.release();
   *
   */
  acquire(options) {
    const entry = new AsyncQueueEntry(this, options);
    if (this.exceptionHandler)
      entry.getTask().catch(this.exceptionHandler);
    if (this.entries.length === 0) {
      this.entries.push(entry);
      entry.consume();
      return entry;
    }
    this.entries.push(entry);
    return entry;
  }
  /**
   * Release the current acquisition and move to next entry.
   */
  release() {
    if (!this.entries.length)
      return;
    this.entries.shift();
    this.entries[0]?.consume();
  }
  /**
   * Cancel all entries
   */
  cancelAll() {
    this.entries.forEach((entry) => entry.cancel());
  }
  /**
   * Remove the given entry from the queue
   * @param entry The entry to remove
   */
  removeEntry(entry) {
    const entryIdx = this.entries.indexOf(entry);
    if (entryIdx !== -1) {
      this.entries.splice(entryIdx, 1);
      return true;
    }
    return false;
  }
};
__name(_AsyncQueue, "AsyncQueue");
var AsyncQueue = _AsyncQueue;
var _AsyncQueueEntry = class _AsyncQueueEntry {
  constructor(queue, options) {
    this.queue = queue;
    this.options = options;
    this.id = import_discord2.SnowflakeUtil.generate().toString();
    this.signal = null;
    this.onAbort = null;
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
    if (this.options?.signal) {
      this.setAbortSignal(this.options.signal);
    }
  }
  setAbortSignal(signal) {
    if (signal.aborted)
      return;
    this.signal = signal;
    this.onAbort = () => {
      this.queue.removeEntry(this);
      this.cancel();
    };
    this.signal.addEventListener("abort", this.onAbort);
  }
  consume() {
    this.cleanup();
    this.resolve();
  }
  release() {
    this.consume();
    this.queue.release();
  }
  cancel() {
    this.cleanup();
    this.reject(new Error("Cancelled"));
  }
  cleanup() {
    if (this.onAbort)
      this.signal?.removeEventListener("abort", this.onAbort);
    this.signal = null;
    this.onAbort = null;
  }
  getTask() {
    return this.promise;
  }
};
__name(_AsyncQueueEntry, "AsyncQueueEntry");
var AsyncQueueEntry = _AsyncQueueEntry;

// src/queue/GuildQueuePlayerNode.ts
var prism2 = __toESM(require("prism-media"));
var import_opus = require("@discord-player/opus");
var FFMPEG_SRATE_REGEX = /asetrate=\d+\*(\d(\.\d)?)/;
var _progress, _hasFFmpegOptimization, _throw, throw_fn, _performPlay, performPlay_fn, _createGenericStream, createGenericStream_fn, _createFFmpegStream, createFFmpegStream_fn;
var _GuildQueuePlayerNode = class _GuildQueuePlayerNode {
  constructor(queue) {
    this.queue = queue;
    __privateAdd(this, _throw);
    __privateAdd(this, _performPlay);
    __privateAdd(this, _createGenericStream);
    __privateAdd(this, _createFFmpegStream);
    __privateAdd(this, _progress, 0);
    __privateAdd(this, _hasFFmpegOptimization, false);
    this.tasksQueue = new AsyncQueue();
    __privateSet(this, _hasFFmpegOptimization, /libopus: (yes|true)/.test(this.queue.player.scanDeps()));
  }
  /**
   * If the player is currently in idle mode
   */
  isIdle() {
    return !!this.queue.dispatcher?.isIdle();
  }
  /**
   * If the player is currently buffering the track
   */
  isBuffering() {
    return !!this.queue.dispatcher?.isBuffering();
  }
  /**
   * If the player is currently playing a track
   */
  isPlaying() {
    return !!this.queue.dispatcher?.isPlaying();
  }
  /**
   * If the player is currently paused
   */
  isPaused() {
    return !!this.queue.dispatcher?.isPaused();
  }
  /**
   * Reset progress history
   */
  resetProgress() {
    __privateSet(this, _progress, 0);
  }
  /**
   * Set player progress
   */
  setProgress(progress) {
    __privateSet(this, _progress, progress);
  }
  /**
   * The stream time for current session
   */
  get streamTime() {
    return this.queue.dispatcher?.streamTime ?? 0;
  }
  /**
   * Current playback duration with history included
   */
  get playbackTime() {
    const dur = __privateGet(this, _progress) + this.streamTime;
    return dur;
  }
  /**
   * Get duration multiplier
   */
  getDurationMultiplier() {
    const srateFilters = this.queue.filters.ffmpeg.toArray().filter((ff) => FFMPEG_SRATE_REGEX.test(ff));
    const multipliers = srateFilters.map((m) => {
      return parseFloat(FFMPEG_SRATE_REGEX.exec(m)?.[1]);
    }).filter((f) => !isNaN(f));
    return !multipliers.length ? 1 : multipliers.reduce((accumulator, current) => current + accumulator);
  }
  /**
   * Estimated progress of the player
   */
  get estimatedPlaybackTime() {
    const dur = this.playbackTime;
    return Math.round(this.getDurationMultiplier() * dur);
  }
  /**
   * Estimated total duration of the player
   */
  get estimatedDuration() {
    const dur = this.totalDuration;
    return Math.round(dur / this.getDurationMultiplier());
  }
  /**
   * Total duration of the current audio track
   */
  get totalDuration() {
    const prefersBridgedMetadata = this.queue.options.preferBridgedMetadata;
    const track = this.queue.currentTrack;
    if (prefersBridgedMetadata && track?.metadata != null && typeof track.metadata === "object" && "bridge" in track.metadata) {
      const duration = track.metadata?.bridge.duration;
      if (TypeUtil.isNumber(duration))
        return duration;
    }
    return track?.durationMS ?? 0;
  }
  /**
   * Get stream progress
   * @param ignoreFilters Ignore filters
   */
  getTimestamp(ignoreFilters = false) {
    if (!this.queue.currentTrack)
      return null;
    const current = ignoreFilters ? this.playbackTime : this.estimatedPlaybackTime;
    const total = ignoreFilters ? this.totalDuration : this.estimatedDuration;
    return {
      current: {
        label: Util.buildTimeCode(Util.parseMS(current)),
        value: current
      },
      total: {
        label: Util.buildTimeCode(Util.parseMS(total)),
        value: total
      },
      progress: Math.round(current / total * 100)
    };
  }
  /**
   * Create progress bar for current progress
   * @param options Progress bar options
   */
  createProgressBar(options) {
    const timestamp = this.getTimestamp();
    if (!timestamp)
      return null;
    const { indicator = "\u{1F518}", leftChar = "\u25AC", rightChar = "\u25AC", length = 15, timecodes = true, separator = "\u2503" } = options || {};
    if (isNaN(length) || length < 0 || !Number.isFinite(length)) {
      throw Exceptions.ERR_OUT_OF_RANGE("[PlayerProgressBarOptions.length]", String(length), "0", "Finite Number");
    }
    const index = Math.round(timestamp.current.value / timestamp.total.value * length);
    if (index >= 1 && index <= length) {
      const bar = leftChar.repeat(index - 1).split("");
      bar.push(indicator);
      bar.push(rightChar.repeat(length - index));
      if (timecodes) {
        return `${timestamp.current.label} ${separator} ${bar.join("")} ${separator} ${timestamp.total.label}`;
      } else {
        return `${bar.join("")}`;
      }
    } else {
      if (timecodes) {
        return `${timestamp.current.label} ${separator} ${indicator}${rightChar.repeat(length - 1)} ${separator} ${timestamp.total.label}`;
      } else {
        return `${indicator}${rightChar.repeat(length - 1)}`;
      }
    }
  }
  /**
   * Seek the player
   * @param duration The duration to seek to
   */
  async seek(duration) {
    if (!this.queue.currentTrack)
      return false;
    if (duration === this.estimatedPlaybackTime)
      return true;
    if (duration > this.totalDuration) {
      return this.skip({
        reason: "SEEK_OVER_THRESHOLD" /* SEEK_OVER_THRESHOLD */,
        description: Exceptions.ERR_OUT_OF_RANGE("[duration]", String(duration), "0", String(this.totalDuration)).message
      });
    }
    if (duration < 0)
      duration = 0;
    return await this.queue.filters.triggerReplay(duration);
  }
  /**
   * Current volume
   */
  get volume() {
    return this.queue.dispatcher?.volume ?? 100;
  }
  /**
   * Set volume
   * @param vol Volume amount to set
   */
  setVolume(vol) {
    if (!this.queue.dispatcher)
      return false;
    const res = this.queue.dispatcher.setVolume(vol);
    if (res)
      this.queue.filters._lastFiltersCache.volume = vol;
    return res;
  }
  /**
   * Set bit rate
   * @param rate The bit rate to set
   */
  setBitrate(rate) {
    this.queue.dispatcher?.audioResource?.encoder?.setBitrate(rate === "auto" ? this.queue.channel?.bitrate ?? 64e3 : rate);
  }
  /**
   * Set paused state
   * @param state The state
   */
  setPaused(state) {
    if (state)
      return this.queue.dispatcher?.pause(true) || false;
    return this.queue.dispatcher?.resume() || false;
  }
  /**
   * Pause the playback
   */
  pause() {
    return this.setPaused(true);
  }
  /**
   * Resume the playback
   */
  resume() {
    return this.setPaused(false);
  }
  /**
   * Skip current track
   */
  skip(options) {
    if (!this.queue.dispatcher)
      return false;
    const track = this.queue.currentTrack;
    if (!track)
      return false;
    this.queue.setTransitioning(false);
    this.queue.dispatcher.end();
    const { reason, description } = options || {
      reason: "MANUAL" /* Manual */,
      description: "The track was skipped manually"
    };
    this.queue.emit(GuildQueueEvent.playerSkip, this.queue, track, reason, description);
    return true;
  }
  /**
   * Remove the given track from queue
   * @param track The track to remove
   * @param emitEvent Whether or not to emit the event @defaultValue true
   */
  remove(track, emitEvent = true) {
    const foundTrack = this.queue.tracks.find((t, idx) => {
      if (track instanceof Track || typeof track === "string") {
        return (typeof track === "string" ? track : track.id) === t.id;
      }
      if (typeof track === "string")
        return track === t.id;
      return idx === track;
    });
    if (!foundTrack)
      return null;
    this.queue.tracks.removeOne((t) => t.id === foundTrack.id);
    if (emitEvent)
      this.queue.emit(GuildQueueEvent.audioTrackRemove, this.queue, foundTrack);
    return foundTrack;
  }
  /**
   * Jump to specific track on the queue
   * @param track The track to jump to without removing other tracks
   */
  jump(track) {
    const removed = this.remove(track, false);
    if (!removed)
      return false;
    this.queue.tracks.store.unshift(removed);
    return this.skip({
      reason: "JUMPED_TO_ANOTHER_TRACK" /* Jump */,
      description: "The track was jumped to manually"
    });
  }
  /**
   * Get track position
   * @param track The track
   */
  getTrackPosition(track) {
    return this.queue.tracks.toArray().findIndex((t, idx) => {
      if (track instanceof Track || typeof track === "string") {
        return (typeof track === "string" ? track : track.id) === t.id;
      }
      if (typeof track === "string")
        return track === t.id;
      return idx === track;
    });
  }
  /**
   * Skip to the given track, removing others on the way
   * @param track The track to skip to
   */
  skipTo(track) {
    const idx = this.getTrackPosition(track);
    if (idx < 0)
      return false;
    const removed = this.remove(idx);
    if (!removed)
      return false;
    const toRemove = this.queue.tracks.store.filter((_, i) => i <= idx);
    this.queue.tracks.store.splice(0, idx, removed);
    this.queue.emit(GuildQueueEvent.audioTracksRemove, this.queue, toRemove);
    return this.skip({
      reason: "SKIP_TO_ANOTHER_TRACK" /* SkipTo */,
      description: "The player was skipped to another track manually"
    });
  }
  /**
   * Insert a track on the given position in queue
   * @param track The track to insert
   * @param index The position to insert to, defaults to 0.
   */
  insert(track, index = 0) {
    if (!(track instanceof Track))
      throw Exceptions.ERR_INVALID_ARG_TYPE("track value", "instance of Track", String(track));
    VALIDATE_QUEUE_CAP(this.queue, track);
    this.queue.tracks.store.splice(index, 0, track);
    if (!this.queue.options.noEmitInsert)
      this.queue.emit(GuildQueueEvent.audioTrackAdd, this.queue, track);
  }
  /**
   * Moves a track in the queue
   * @param from The track to move
   * @param to The position to move to
   */
  move(from, to) {
    const removed = this.remove(from);
    if (!removed) {
      throw Exceptions.ERR_NO_RESULT("invalid track to move");
    }
    this.insert(removed, to);
  }
  /**
   * Copy a track in the queue
   * @param from The track to clone
   * @param to The position to clone at
   */
  copy(from, to) {
    const src = this.queue.tracks.at(this.getTrackPosition(from));
    if (!src) {
      throw Exceptions.ERR_NO_RESULT("invalid track to copy");
    }
    this.insert(src, to);
  }
  /**
   * Swap two tracks in the queue
   * @param first The first track to swap
   * @param second The second track to swap
   */
  swap(first, second) {
    const src = this.getTrackPosition(first);
    if (src < 0)
      throw Exceptions.ERR_NO_RESULT("invalid src track to swap");
    const dest = this.getTrackPosition(second);
    if (dest < 0)
      throw Exceptions.ERR_NO_RESULT("invalid dest track to swap");
    const srcT = this.queue.tracks.store[src];
    const destT = this.queue.tracks.store[dest];
    this.queue.tracks.store[src] = destT;
    this.queue.tracks.store[dest] = srcT;
  }
  /**
   * Stop the playback
   * @param force Whether or not to forcefully stop the playback
   */
  stop(force = false) {
    this.queue.tracks.clear();
    this.queue.history.clear();
    if (!this.queue.dispatcher)
      return false;
    this.queue.dispatcher.end();
    if (force) {
      this.queue.dispatcher.destroy();
      return true;
    }
    if (this.queue.options.leaveOnStop) {
      const tm = setTimeout(() => {
        if (this.isPlaying() || this.queue.tracks.size)
          return clearTimeout(tm);
        this.queue.dispatcher?.destroy();
      }, this.queue.options.leaveOnStopCooldown).unref();
    }
    return true;
  }
  /**
   * Play raw audio resource
   * @param resource The audio resource to play
   */
  async playRaw(resource) {
    await this.queue.dispatcher?.playStream(resource);
  }
  /**
   * Play the given track
   * @param res The track to play
   * @param options Options for playing the track
   */
  async play(res, options) {
    if (!this.queue.dispatcher?.voiceConnection) {
      throw Exceptions.ERR_NO_VOICE_CONNECTION();
    }
    if (this.queue.hasDebugger)
      this.queue.debug(`Received play request from guild ${this.queue.guild.name} (ID: ${this.queue.guild.id})`);
    options = Object.assign(
      {},
      {
        queue: this.queue.currentTrack != null,
        transitionMode: false,
        seek: 0
      },
      options
    );
    if (res && options.queue) {
      if (this.queue.hasDebugger)
        this.queue.debug("Requested option requires to queue the track, adding the given track to queue instead...");
      return this.queue.addTrack(res);
    }
    const track = res || this.queue.tracks.dispatch();
    if (!track) {
      const error = Exceptions.ERR_NO_RESULT("Play request received but track was not provided");
      this.queue.emit(GuildQueueEvent.error, this.queue, error);
      return;
    }
    if (this.queue.hasDebugger)
      this.queue.debug("Requested option requires to play the track, initializing...");
    try {
      if (this.queue.hasDebugger)
        this.queue.debug(`Initiating stream extraction process...`);
      const src = track.raw?.source || track.source;
      const qt = track.queryType || (src === "spotify" ? "spotifySong" : src === "apple_music" ? "appleMusicSong" : src);
      if (this.queue.hasDebugger)
        this.queue.debug(`Executing onBeforeCreateStream hook (QueryType: ${qt})...`);
      const streamSrc = {
        error: null,
        stream: null
      };
      await this.queue.onBeforeCreateStream?.(track, qt || "arbitrary", this.queue).then(
        (s) => {
          if (s) {
            streamSrc.stream = s;
          }
        },
        (e) => streamSrc.error = e
      );
      if (!streamSrc.stream && streamSrc.error)
        return __privateMethod(this, _throw, throw_fn).call(this, track, streamSrc.error);
      if (!streamSrc.stream) {
        if (this.queue.hasDebugger)
          this.queue.debug("Failed to get stream from onBeforeCreateStream!");
        await __privateMethod(this, _createGenericStream, createGenericStream_fn).call(this, track).then(
          (r) => {
            if (r?.result) {
              streamSrc.stream = r.result;
              return;
            }
            if (r?.error) {
              streamSrc.error = r.error;
              return;
            }
            streamSrc.stream = streamSrc.error = null;
          },
          (e) => streamSrc.error = e
        );
      }
      if (!streamSrc.stream)
        return __privateMethod(this, _throw, throw_fn).call(this, track, streamSrc.error);
      if (typeof options.seek === "number" && options.seek >= 0) {
        __privateSet(this, _progress, options.seek);
      } else {
        __privateSet(this, _progress, 0);
      }
      const cookies = track.raw?.source === "youtube" ? this.queue.player.options.ytdlOptions?.requestOptions?.headers?.cookie : void 0;
      const trackStreamConfig = {
        dispatcherConfig: {
          disableBiquad: this.queue.options.disableBiquad,
          disableEqualizer: this.queue.options.disableEqualizer,
          disableVolume: this.queue.options.disableVolume,
          disableFilters: this.queue.options.disableFilterer,
          disableResampler: this.queue.options.disableResampler,
          sampleRate: typeof this.queue.options.resampler === "number" && this.queue.options.resampler > 0 ? this.queue.options.resampler : void 0,
          biquadFilter: this.queue.filters._lastFiltersCache.biquad || void 0,
          eq: this.queue.filters._lastFiltersCache.equalizer,
          defaultFilters: this.queue.filters._lastFiltersCache.filters,
          volume: this.queue.filters._lastFiltersCache.volume,
          data: track,
          type: import_discord_voip3.StreamType.Raw,
          skipFFmpeg: this.queue.player.options.skipFFmpeg
        },
        playerConfig: options
      };
      let resolver = Util.noop;
      const donePromise = new Promise((resolve) => resolver = resolve);
      const success = this.queue.emit(GuildQueueEvent.willPlayTrack, this.queue, track, trackStreamConfig, resolver);
      if (!success)
        resolver();
      if (this.queue.hasDebugger)
        this.queue.debug("Waiting for willPlayTrack event to resolve...");
      await donePromise;
      const daspDisabled = [
        trackStreamConfig.dispatcherConfig.disableBiquad,
        trackStreamConfig.dispatcherConfig.disableEqualizer,
        trackStreamConfig.dispatcherConfig.disableFilters,
        trackStreamConfig.dispatcherConfig.disableResampler,
        trackStreamConfig.dispatcherConfig.disableVolume
      ].every((e) => !!e === true);
      const needsFilters = !!trackStreamConfig.playerConfig.seek || !!this.queue.filters.ffmpeg.args.length;
      const shouldSkipFFmpeg = !!trackStreamConfig.dispatcherConfig.skipFFmpeg && !needsFilters;
      let finalStream;
      const demuxable = /* @__PURE__ */ __name((fmt) => [import_discord_voip3.StreamType.Opus, import_discord_voip3.StreamType.WebmOpus, import_discord_voip3.StreamType.OggOpus].includes(fmt), "demuxable");
      if (shouldSkipFFmpeg && !(streamSrc.stream instanceof import_stream2.Readable) && typeof streamSrc.stream !== "string" && demuxable(streamSrc.stream.$fmt)) {
        const { $fmt, stream } = streamSrc.stream;
        const shouldPCM = !daspDisabled;
        if (this.queue.hasDebugger)
          this.queue.debug(`skipFFmpeg is set to true and stream is demuxable, creating stream with type ${shouldPCM ? "pcm" : "opus"}`);
        const opusStream = $fmt === import_discord_voip3.StreamType.Opus ? stream : $fmt === import_discord_voip3.StreamType.OggOpus ? stream.pipe(new prism2.opus.OggDemuxer()) : stream.pipe(new prism2.opus.WebmDemuxer());
        if (shouldPCM) {
          finalStream = opusStream.pipe(
            new import_opus.OpusDecoder({
              channels: 2,
              frameSize: 960,
              rate: 48e3
            })
          );
          trackStreamConfig.dispatcherConfig.type = import_discord_voip3.StreamType.Raw;
        } else {
          finalStream = opusStream;
          trackStreamConfig.dispatcherConfig.type = import_discord_voip3.StreamType.Opus;
        }
      } else {
        finalStream = __privateMethod(this, _createFFmpegStream, createFFmpegStream_fn).call(this, streamSrc.stream instanceof import_stream2.Readable || typeof streamSrc.stream === "string" ? streamSrc.stream : streamSrc.stream.stream, track, options.seek ?? 0, cookies);
        trackStreamConfig.dispatcherConfig.type = import_discord_voip3.StreamType.Raw;
      }
      if (options.transitionMode) {
        if (this.queue.hasDebugger)
          this.queue.debug(`Transition mode detected, player will wait for buffering timeout to expire (Timeout: ${this.queue.options.bufferingTimeout}ms)`);
        await (0, import_promises2.setTimeout)(this.queue.options.bufferingTimeout);
        if (this.queue.hasDebugger)
          this.queue.debug("Buffering timeout has expired!");
      }
      if (this.queue.hasDebugger)
        this.queue.debug(`Preparing final stream config: ${JSON.stringify(trackStreamConfig, null, 2)}`);
      const dispatcher = this.queue.dispatcher;
      if (!dispatcher) {
        if (this.queue.hasDebugger) {
          this.queue.debug("Dispatcher is not available, this is most likely due to the queue being deleted in the middle of operation. Cancelling the stream...");
        }
        finalStream.destroy();
      } else {
        const resource = await dispatcher.createStream(finalStream, trackStreamConfig.dispatcherConfig);
        this.queue.setTransitioning(!!options.transitionMode);
        await __privateMethod(this, _performPlay, performPlay_fn).call(this, resource);
      }
    } catch (e) {
      if (this.queue.hasDebugger)
        this.queue.debug(`Failed to initialize audio player: ${e}`);
      throw e;
    }
  }
};
_progress = new WeakMap();
_hasFFmpegOptimization = new WeakMap();
_throw = new WeakSet();
throw_fn = /* @__PURE__ */ __name(function(track, error) {
  const streamDefinitelyFailedMyDearT_TPleaseTrustMeItsNotMyFault = Exceptions.ERR_NO_RESULT(`Could not extract stream for this track${error ? `

${error.stack || error}` : ""}`);
  this.queue.emit(GuildQueueEvent.playerSkip, this.queue, track, "ERR_NO_STREAM" /* NoStream */, streamDefinitelyFailedMyDearT_TPleaseTrustMeItsNotMyFault.message);
  this.queue.emit(GuildQueueEvent.playerError, this.queue, streamDefinitelyFailedMyDearT_TPleaseTrustMeItsNotMyFault, track);
  const nextTrack = this.queue.tracks.dispatch();
  if (nextTrack)
    this.play(nextTrack, { queue: false });
  return;
}, "#throw");
_performPlay = new WeakSet();
performPlay_fn = /* @__PURE__ */ __name(async function(resource) {
  if (!this.queue.dispatcher) {
    if (this.queue.hasDebugger) {
      this.queue.debug("Dispatcher is not available, this is most likely due to the queue being deleted in the middle of operation. Cancelling the stream...");
    }
  } else {
    if (this.queue.hasDebugger)
      this.queue.debug("Initializing audio player...");
    await this.queue.dispatcher.playStream(resource);
    if (this.queue.hasDebugger)
      this.queue.debug("Dispatching audio...");
  }
}, "#performPlay");
_createGenericStream = new WeakSet();
createGenericStream_fn = /* @__PURE__ */ __name(async function(track) {
  if (this.queue.hasDebugger)
    this.queue.debug(`Attempting to extract stream for Track { title: ${track.title}, url: ${track.url} } using registered extractors`);
  const streamInfo = await this.queue.player.extractors.run(async (extractor) => {
    if (this.queue.player.options.blockStreamFrom?.some((ext) => ext === extractor.identifier))
      return false;
    const canStream = await extractor.validate(track.url, track.queryType || QueryResolver.resolve(track.url).type);
    if (!canStream)
      return false;
    return await extractor.stream(track);
  }, false);
  if (!streamInfo || !streamInfo.result) {
    if (this.queue.hasDebugger)
      this.queue.debug(`Failed to extract stream for Track { title: ${track.title}, url: ${track.url} } using registered extractors`);
    return streamInfo || null;
  }
  if (this.queue.hasDebugger)
    this.queue.debug(`Stream extraction was successful for Track { title: ${track.title}, url: ${track.url} } (Extractor: ${streamInfo.extractor?.identifier || "N/A"})`);
  return streamInfo;
}, "#createGenericStream");
_createFFmpegStream = new WeakSet();
createFFmpegStream_fn = /* @__PURE__ */ __name(function(stream, track, seek = 0, cookies, opus3) {
  const ffmpegStream = this.queue.filters.ffmpeg.createStream(stream, {
    encoderArgs: this.queue.filters.ffmpeg.args,
    seek: seek / 1e3,
    fmt: opus3 ? "opus" : "s16le",
    cookies,
    useLegacyFFmpeg: !!this.queue.player.options.useLegacyFFmpeg
  }).on("error", (err) => {
    const m = `${err}`.toLowerCase();
    if (this.queue.hasDebugger)
      this.queue.debug(`Stream closed due to an error from FFmpeg stream: ${err.stack || err.message || err}`);
    if (m.includes("premature close") || m.includes("epipe"))
      return;
    this.queue.emit(GuildQueueEvent.playerError, this.queue, err, track);
  });
  return ffmpegStream;
}, "#createFFmpegStream");
__name(_GuildQueuePlayerNode, "GuildQueuePlayerNode");
var GuildQueuePlayerNode = _GuildQueuePlayerNode;

// src/queue/GuildQueueAudioFilters.ts
var import_equalizer2 = require("@discord-player/equalizer");

// src/utils/FFmpegStream.ts
var prism3 = __toESM(require("prism-media"));
var import_ffmpeg = require("@discord-player/ffmpeg");
var getFFmpegProvider = /* @__PURE__ */ __name((legacy = false) => legacy ? prism3.default?.FFmpeg || prism3.FFmpeg : import_ffmpeg.FFmpeg, "getFFmpegProvider");
function FFMPEG_ARGS_STRING(stream, fmt, cookies) {
  const args = [
    "-reconnect",
    "1",
    "-reconnect_streamed",
    "1",
    "-reconnect_delay_max",
    "5",
    "-i",
    stream,
    "-analyzeduration",
    "0",
    "-loglevel",
    "0",
    "-ar",
    "48000",
    "-ac",
    "2",
    "-f",
    `${typeof fmt === "string" ? fmt : "s16le"}`
  ];
  if (fmt === "opus") {
    args.push("-acodec", "libopus");
  }
  if (typeof cookies === "string") {
    args.push("-cookies", cookies.startsWith('"') ? cookies : `"${cookies}"`);
  }
  return args;
}
__name(FFMPEG_ARGS_STRING, "FFMPEG_ARGS_STRING");
function FFMPEG_ARGS_PIPED(fmt) {
  const args = [
    "-analyzeduration",
    "0",
    "-loglevel",
    "0",
    "-ar",
    "48000",
    "-ac",
    "2",
    "-f",
    `${typeof fmt === "string" ? fmt : "s16le"}`
  ];
  if (fmt === "opus") {
    args.push("-acodec", "libopus");
  }
  return args;
}
__name(FFMPEG_ARGS_PIPED, "FFMPEG_ARGS_PIPED");
function createFFmpegStream(stream, options) {
  if (options?.skip && typeof stream !== "string")
    return stream;
  options ?? (options = {});
  const args = typeof stream === "string" ? FFMPEG_ARGS_STRING(stream, options.fmt, options.cookies) : FFMPEG_ARGS_PIPED(options.fmt);
  if (!Number.isNaN(options.seek))
    args.unshift("-ss", String(options.seek));
  if (Array.isArray(options.encoderArgs))
    args.push(...options.encoderArgs);
  const FFMPEG = getFFmpegProvider(!!options.useLegacyFFmpeg);
  const transcoder = new FFMPEG({ shell: false, args });
  transcoder.on("close", () => transcoder.destroy());
  if (typeof stream !== "string") {
    stream.on("error", () => transcoder.destroy());
    stream.pipe(transcoder);
  }
  return transcoder;
}
__name(createFFmpegStream, "createFFmpegStream");

// src/queue/GuildQueueAudioFilters.ts
var makeBands = /* @__PURE__ */ __name((arr) => {
  return Array.from(
    {
      length: import_equalizer2.Equalizer.BAND_COUNT
    },
    (_, i) => ({
      band: i,
      gain: arr[i] ? arr[i] / 30 : 0
    })
  );
}, "makeBands");
var EqualizerConfigurationPreset = Object.freeze({
  Flat: makeBands([]),
  Classical: makeBands([-111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -7.2, -7.2, -7.2, -9.6]),
  Club: makeBands([-111022e-20, -111022e-20, 8, 5.6, 5.6, 5.6, 3.2, -111022e-20, -111022e-20, -111022e-20]),
  Dance: makeBands([9.6, 7.2, 2.4, -111022e-20, -111022e-20, -5.6, -7.2, -7.2, -111022e-20, -111022e-20]),
  FullBass: makeBands([-8, 9.6, 9.6, 5.6, 1.6, -4, -8, -10.4, -11.2, -11.2]),
  FullBassTreble: makeBands([7.2, 5.6, -111022e-20, -7.2, -4.8, 1.6, 8, 11.2, 12, 12]),
  FullTreble: makeBands([-9.6, -9.6, -9.6, -4, 2.4, 11.2, 16, 16, 16, 16.8]),
  Headphones: makeBands([4.8, 11.2, 5.6, -3.2, -2.4, 1.6, 4.8, 9.6, 12.8, 14.4]),
  LargeHall: makeBands([10.4, 10.4, 5.6, 5.6, -111022e-20, -4.8, -4.8, -4.8, -111022e-20, -111022e-20]),
  Live: makeBands([-4.8, -111022e-20, 4, 5.6, 5.6, 5.6, 4, 2.4, 2.4, 2.4]),
  Party: makeBands([7.2, 7.2, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, -111022e-20, 7.2, 7.2]),
  Pop: makeBands([-1.6, 4.8, 7.2, 8, 5.6, -111022e-20, -2.4, -2.4, -1.6, -1.6]),
  Reggae: makeBands([-111022e-20, -111022e-20, -111022e-20, -5.6, -111022e-20, 6.4, 6.4, -111022e-20, -111022e-20, -111022e-20]),
  Rock: makeBands([8, 4.8, -5.6, -8, -3.2, 4, 8.8, 11.2, 11.2, 11.2]),
  Ska: makeBands([-2.4, -4.8, -4, -111022e-20, 4, 5.6, 8.8, 9.6, 11.2, 9.6]),
  Soft: makeBands([4.8, 1.6, -111022e-20, -2.4, -111022e-20, 4, 8, 9.6, 11.2, 12]),
  SoftRock: makeBands([4, 4, 2.4, -111022e-20, -4, -5.6, -3.2, -111022e-20, 2.4, 8.8]),
  Techno: makeBands([8, 5.6, -111022e-20, -5.6, -4.8, -111022e-20, 8, 9.6, 9.6, 8.8])
});
var _ffmpegFilters, _inputArgs, _setFilters, setFilters_fn;
var _FFmpegFilterer = class _FFmpegFilterer {
  constructor(af) {
    this.af = af;
    __privateAdd(this, _setFilters);
    __privateAdd(this, _ffmpegFilters, []);
    __privateAdd(this, _inputArgs, []);
  }
  /**
   * Indicates whether ffmpeg may be skipped
   */
  get skippable() {
    return !!this.af.queue.player.options.skipFFmpeg;
  }
  /**
   * Set input args for FFmpeg
   */
  setInputArgs(args) {
    if (!args.every((arg) => typeof arg === "string"))
      throw Exceptions.ERR_INVALID_ARG_TYPE("args", "Array<string>", "invalid item(s)");
    __privateSet(this, _inputArgs, args);
  }
  /**
   * Get input args
   */
  get inputArgs() {
    return __privateGet(this, _inputArgs);
  }
  /**
   * Get encoder args
   */
  get encoderArgs() {
    if (!this.filters.length)
      return [];
    return ["-af", this.toString()];
  }
  /**
   * Get final ffmpeg args
   */
  get args() {
    return this.inputArgs.concat(this.encoderArgs);
  }
  /**
   * Create ffmpeg stream
   * @param source The stream source
   * @param options The stream options
   */
  createStream(source, options) {
    if (__privateGet(this, _inputArgs).length)
      options.encoderArgs = [...__privateGet(this, _inputArgs), ...options.encoderArgs || []];
    return createFFmpegStream(source, options);
  }
  /**
   * Set ffmpeg filters
   * @param filters The filters
   */
  setFilters(filters) {
    let _filters = [];
    if (typeof filters === "boolean") {
      _filters = !filters ? [] : Object.keys(AudioFilters.filters);
    } else if (Array.isArray(filters)) {
      _filters = filters;
    } else {
      _filters = Object.entries(filters).filter((res) => res[1] === true).map((m) => m[0]);
    }
    return __privateMethod(this, _setFilters, setFilters_fn).call(this, _filters);
  }
  /**
   * Currently active ffmpeg filters
   */
  get filters() {
    return __privateGet(this, _ffmpegFilters);
  }
  set filters(filters) {
    this.setFilters(filters);
  }
  /**
   * Toggle given ffmpeg filter(s)
   * @param filters The filter(s)
   */
  toggle(filters) {
    if (!Array.isArray(filters))
      filters = [filters];
    const fresh = [];
    filters.forEach((f) => {
      if (this.filters.includes(f))
        return;
      fresh.push(f);
    });
    return __privateMethod(this, _setFilters, setFilters_fn).call(this, __privateGet(this, _ffmpegFilters).filter((r) => !filters.includes(r)).concat(fresh));
  }
  /**
   * Set default filters
   * @param ff Filters list
   */
  setDefaults(ff) {
    __privateSet(this, _ffmpegFilters, ff);
  }
  /**
   * Get list of enabled filters
   */
  getFiltersEnabled() {
    return __privateGet(this, _ffmpegFilters);
  }
  /**
   * Get list of disabled filters
   */
  getFiltersDisabled() {
    return AudioFilters.names.filter((f) => !__privateGet(this, _ffmpegFilters).includes(f));
  }
  /**
   * Check if the given filter is enabled
   * @param filter The filter
   */
  isEnabled(filter) {
    return __privateGet(this, _ffmpegFilters).includes(filter);
  }
  /**
   * Check if the given filter is disabled
   * @param filter The filter
   */
  isDisabled(filter) {
    return !this.isEnabled(filter);
  }
  /**
   * Check if the given filter is a valid filter
   * @param filter The filter to test
   */
  isValidFilter(filter) {
    return AudioFilters.has(filter);
  }
  /**
   * Convert current filters to array
   */
  toArray() {
    return this.filters.map((filter) => AudioFilters.get(filter));
  }
  /**
   * Convert current filters to JSON object
   */
  toJSON() {
    const obj = {};
    this.filters.forEach((filter) => obj[filter] = AudioFilters.get(filter));
    return obj;
  }
  /**
   * String representation of current filters
   */
  toString() {
    return AudioFilters.create(this.filters);
  }
};
_ffmpegFilters = new WeakMap();
_inputArgs = new WeakMap();
_setFilters = new WeakSet();
setFilters_fn = /* @__PURE__ */ __name(function(filters) {
  const { queue } = this.af;
  if (filters.every((f) => __privateGet(this, _ffmpegFilters).includes(f)) && __privateGet(this, _ffmpegFilters).every((f) => filters.includes(f)))
    return Promise.resolve(false);
  const ignoreFilters = this.filters.some((ff) => ff === "nightcore" || ff === "vaporwave") && !filters.some((ff) => ff === "nightcore" || ff === "vaporwave");
  const seekTime = queue.node.getTimestamp(ignoreFilters)?.current.value || 0;
  const prev = __privateGet(this, _ffmpegFilters).slice();
  __privateSet(this, _ffmpegFilters, [...new Set(filters)]);
  return this.af.triggerReplay(seekTime).then((t) => {
    queue.emit(GuildQueueEvent.audioFiltersUpdate, queue, prev, __privateGet(this, _ffmpegFilters).slice());
    return t;
  });
}, "#setFilters");
__name(_FFmpegFilterer, "FFmpegFilterer");
var FFmpegFilterer = _FFmpegFilterer;
var _GuildQueueAudioFilters = class _GuildQueueAudioFilters {
  constructor(queue) {
    this.queue = queue;
    this.graph = new AFilterGraph(this);
    this.ffmpeg = new FFmpegFilterer(this);
    this.equalizerPresets = EqualizerConfigurationPreset;
    this._lastFiltersCache = {
      biquad: null,
      equalizer: [],
      filters: [],
      volume: 100,
      sampleRate: -1
    };
    if (typeof this.queue.options.volume === "number") {
      this._lastFiltersCache.volume = this.queue.options.volume;
    }
  }
  // TODO: enable this in the future
  // public get ffmpeg(): FFmpegFilterer<Meta> | null {
  //     if (this.queue.player.options.skipFFmpeg) {
  //         if (this.#ffmpeg) this.#ffmpeg = null;
  //         return null;
  //     }
  //     if (!this.#ffmpeg) {
  //         this.#ffmpeg = new FFmpegFilterer<Meta>(this);
  //     }
  //     return this.#ffmpeg;
  // }
  /**
   * Volume transformer
   */
  get volume() {
    return this.queue.dispatcher?.dsp?.volume || null;
  }
  /**
   * 15 Band Equalizer
   */
  get equalizer() {
    return this.queue.dispatcher?.equalizer || null;
  }
  /**
   * Digital biquad filters
   */
  get biquad() {
    return this.queue.dispatcher?.biquad || null;
  }
  /**
   * DSP filters
   */
  get filters() {
    return this.queue.dispatcher?.filters || null;
  }
  /**
   * Audio resampler
   */
  get resampler() {
    return this.queue.dispatcher?.resampler || null;
  }
  /**
   * Replay current track in transition mode
   * @param seek The duration to seek to
   */
  async triggerReplay(seek = 0) {
    if (!this.queue.currentTrack)
      return false;
    const entry = this.queue.node.tasksQueue.acquire();
    try {
      await entry.getTask();
      await this.queue.node.play(this.queue.currentTrack, {
        queue: false,
        seek,
        transitionMode: true
      });
      this.queue.node.tasksQueue.release();
      return true;
    } catch {
      this.queue.node.tasksQueue.release();
      return false;
    }
  }
};
__name(_GuildQueueAudioFilters, "GuildQueueAudioFilters");
var GuildQueueAudioFilters = _GuildQueueAudioFilters;
var _AFilterGraph = class _AFilterGraph {
  constructor(af) {
    this.af = af;
  }
  get ffmpeg() {
    return this.af.ffmpeg?.filters ?? [];
  }
  get equalizer() {
    return (this.af.equalizer?.bandMultipliers || []).map((m, i) => ({
      band: i,
      gain: m
    }));
  }
  get biquad() {
    return this.af.biquad?.getFilterName() || null;
  }
  get filters() {
    return this.af.filters?.filters || [];
  }
  get volume() {
    return this.af.volume;
  }
  get resampler() {
    return this.af.resampler;
  }
  dump() {
    return {
      ffmpeg: this.ffmpeg,
      equalizer: this.equalizer,
      biquad: this.biquad,
      filters: this.filters,
      sampleRate: this.resampler?.targetSampleRate || this.resampler?.sampleRate || 48e3,
      volume: this.volume?.volume ?? 100
    };
  }
};
__name(_AFilterGraph, "AFilterGraph");
var AFilterGraph = _AFilterGraph;

// src/queue/GuildQueue.ts
var import_timers = require("timers");

// src/queue/GuildQueueStatistics.ts
var _GuildQueueStatistics = class _GuildQueueStatistics {
  constructor(queue) {
    this.queue = queue;
  }
  /**
   * Generate statistics of this queue
   */
  generate() {
    return {
      latency: {
        eventLoop: this.queue.player.eventLoopLag,
        voiceConnection: this.queue.ping
      },
      status: {
        buffering: this.queue.node.isBuffering(),
        playing: this.queue.node.isPlaying(),
        paused: this.queue.node.isPaused(),
        idle: this.queue.node.isIdle()
      },
      tracksCount: this.queue.tracks.size,
      historySize: this.queue.history.tracks.size,
      extractors: this.queue.player.extractors.size,
      listeners: this.queue.guild.members.me?.voice.channel?.members.filter((m) => !m.user.bot).size || 0,
      memoryUsage: process.memoryUsage(),
      versions: {
        node: process.version,
        player: "6.6.9"
      }
    };
  }
};
__name(_GuildQueueStatistics, "GuildQueueStatistics");
var GuildQueueStatistics = _GuildQueueStatistics;

// src/queue/SyncedLyricsProvider.ts
var timestampPattern = /\[(\d{2}):(\d{2})\.(\d{2})\]/;
var _loop, _callback, _onUnsubscribe, _createLoop, createLoop_fn;
var _SyncedLyricsProvider = class _SyncedLyricsProvider {
  constructor(queue, raw) {
    this.queue = queue;
    this.raw = raw;
    __privateAdd(this, _createLoop);
    __privateAdd(this, _loop, null);
    __privateAdd(this, _callback, null);
    __privateAdd(this, _onUnsubscribe, null);
    this.interval = 100;
    this.lyrics = /* @__PURE__ */ new Map();
    if (raw?.syncedLyrics)
      this.load(raw?.syncedLyrics);
  }
  isSubscribed() {
    return __privateGet(this, _callback) !== null;
  }
  load(lyrics) {
    if (!lyrics)
      throw Exceptions.ERR_NOT_EXISTING("syncedLyrics");
    this.lyrics.clear();
    this.unsubscribe();
    const lines = lyrics.split("\n");
    for (const line of lines) {
      const match = line.match(timestampPattern);
      if (match) {
        const [, minutes, seconds, milliseconds] = match;
        const timestamp = parseInt(minutes) * 60 * 1e3 + parseInt(seconds) * 1e3 + parseInt(milliseconds);
        this.lyrics.set(timestamp, line.replace(timestampPattern, "").trim());
      }
    }
  }
  /**
   * Returns the lyrics at a specific time or at the closest time (±2 seconds)
   * @param time The time in milliseconds
   */
  at(time) {
    const lowestTime = this.lyrics.keys().next().value;
    if (lowestTime == null || time < lowestTime)
      return null;
    if (this.lyrics.has(time))
      return { line: this.lyrics.get(time), timestamp: time };
    const keys = Array.from(this.lyrics.keys());
    const closest = keys.reduce((a, b) => Math.abs(b - time) < Math.abs(a - time) ? b : a);
    if (closest > time)
      return null;
    if (Math.abs(closest - time) > 2e3)
      return null;
    const line = this.lyrics.get(closest);
    if (!line)
      return null;
    return { timestamp: closest, line };
  }
  /**
   * Callback for the lyrics change.
   * @param callback The callback function
   */
  onChange(callback) {
    __privateSet(this, _callback, callback);
  }
  /**
   * Callback to detect when the provider is unsubscribed.
   * @param callback The callback function
   */
  onUnsubscribe(callback) {
    __privateSet(this, _onUnsubscribe, callback);
  }
  /**
   * Unsubscribes from the queue.
   */
  unsubscribe() {
    if (__privateGet(this, _loop))
      clearInterval(__privateGet(this, _loop));
    if (__privateGet(this, _onUnsubscribe))
      __privateGet(this, _onUnsubscribe).call(this);
    __privateSet(this, _callback, null);
    __privateSet(this, _onUnsubscribe, null);
    __privateSet(this, _loop, null);
  }
  /**
   * Subscribes to the queue to monitor the current time.
   * @returns The unsubscribe function
   */
  subscribe() {
    if (__privateGet(this, _loop))
      return () => this.unsubscribe();
    __privateMethod(this, _createLoop, createLoop_fn).call(this);
    return () => this.unsubscribe();
  }
  /**
   * Pauses the lyrics provider.
   */
  pause() {
    const hasLoop = __privateGet(this, _loop) !== null;
    if (hasLoop) {
      clearInterval(__privateGet(this, _loop));
      __privateSet(this, _loop, null);
    }
    return hasLoop;
  }
  /**
   * Resumes the lyrics provider.
   */
  resume() {
    const hasLoop = __privateGet(this, _loop) !== null;
    if (!hasLoop)
      __privateMethod(this, _createLoop, createLoop_fn).call(this);
    return !hasLoop;
  }
};
_loop = new WeakMap();
_callback = new WeakMap();
_onUnsubscribe = new WeakMap();
_createLoop = new WeakSet();
createLoop_fn = /* @__PURE__ */ __name(function() {
  if (!__privateGet(this, _callback))
    return;
  if (__privateGet(this, _loop))
    clearInterval(__privateGet(this, _loop));
  let lastValue = null;
  __privateSet(this, _loop, setInterval(() => {
    if (this.queue.deleted)
      return this.unsubscribe();
    if (!__privateGet(this, _callback) || !this.queue.isPlaying())
      return;
    const time = this.queue.node.getTimestamp();
    if (!time)
      return;
    const lyrics = this.at(time.current.value);
    if (!lyrics)
      return;
    if (lastValue !== null && lyrics.line === lastValue.line && lyrics.timestamp === lastValue.timestamp)
      return;
    lastValue = lyrics;
    __privateGet(this, _callback).call(this, lyrics.line, lyrics.timestamp);
  }, this.interval).unref());
}, "#createLoop");
__name(_SyncedLyricsProvider, "SyncedLyricsProvider");
var SyncedLyricsProvider = _SyncedLyricsProvider;

// src/queue/GuildQueue.ts
var GuildQueueEvent = {
  /**
   * Emitted when audio track is added to the queue
   */
  audioTrackAdd: "audioTrackAdd",
  /**
   * Emitted when audio tracks were added to the queue
   */
  audioTracksAdd: "audioTracksAdd",
  /**
   * Emitted when audio track is removed from the queue
   */
  audioTrackRemove: "audioTrackRemove",
  /**
   * Emitted when audio tracks are removed from the queue
   */
  audioTracksRemove: "audioTracksRemove",
  /**
   * Emitted when a connection is created
   */
  connection: "connection",
  /**
   * Emitted when a voice connection is destroyed
   */
  connectionDestroyed: "connectionDestroyed",
  /**
   * Emitted when the bot is disconnected from the channel
   */
  disconnect: "disconnect",
  /**
   * Emitted when the queue sends a debug info
   */
  debug: "debug",
  /**
   * Emitted when the queue encounters error
   */
  error: "error",
  /**
   * Emitted when the voice channel is empty
   */
  emptyChannel: "emptyChannel",
  /**
   * Emitted when the queue is empty
   */
  emptyQueue: "emptyQueue",
  /**
   * Emitted when the audio player starts streaming audio track
   */
  playerStart: "playerStart",
  /**
   * Emitted when the audio player errors while streaming audio track
   */
  playerError: "playerError",
  /**
   * Emitted when the audio player finishes streaming audio track
   */
  playerFinish: "playerFinish",
  /**
   * Emitted when the audio player skips current track
   */
  playerSkip: "playerSkip",
  /**
   * Emitted when the audio player is triggered
   */
  playerTrigger: "playerTrigger",
  /**
   * Emitted when the voice state is updated. Consuming this event may disable default voice state update handler if `Player.isVoiceStateHandlerLocked()` returns `false`.
   */
  voiceStateUpdate: "voiceStateUpdate",
  /**
   * Emitted when volume is updated
   */
  volumeChange: "volumeChange",
  /**
   * Emitted when player is paused
   */
  playerPause: "playerPause",
  /**
   * Emitted when player is resumed
   */
  playerResume: "playerResume",
  /**
   * Biquad Filters Update
   */
  biquadFiltersUpdate: "biquadFiltersUpdate",
  /**
   * Equalizer Update
   */
  equalizerUpdate: "equalizerUpdate",
  /**
   * DSP update
   */
  dspUpdate: "dspUpdate",
  /**
   * Audio Filters Update
   */
  audioFiltersUpdate: "audioFiltersUpdate",
  /**
   * Audio player will play next track
   */
  willPlayTrack: "willPlayTrack",
  /**
   * Emitted when a voice channel is repopulated
   */
  channelPopulate: "channelPopulate",
  /**
   * Emitted when a queue is successfully created
   */
  queueCreate: "queueCreate",
  /**
   * Emitted when a queue is deleted
   */
  queueDelete: "queueDelete",
  /**
   * Emitted when a queue is trying to add similar track for autoplay
   */
  willAutoPlay: "willAutoPlay"
};
var TrackSkipReason = /* @__PURE__ */ ((TrackSkipReason2) => {
  TrackSkipReason2["NoStream"] = "ERR_NO_STREAM";
  TrackSkipReason2["Manual"] = "MANUAL";
  TrackSkipReason2["SEEK_OVER_THRESHOLD"] = "SEEK_OVER_THRESHOLD";
  TrackSkipReason2["Jump"] = "JUMPED_TO_ANOTHER_TRACK";
  TrackSkipReason2["SkipTo"] = "SKIP_TO_ANOTHER_TRACK";
  TrackSkipReason2["HistoryNext"] = "HISTORY_NEXT_TRACK";
  return TrackSkipReason2;
})(TrackSkipReason || {});
var _transitioning, _deleted, _shuffle, _attachListeners, attachListeners_fn, _removeListeners, removeListeners_fn, _performStart, performStart_fn, _getNextTrack, getNextTrack_fn, _performFinish, performFinish_fn, _emitEnd, emitEnd_fn, _handleAutoplay, handleAutoplay_fn;
var _GuildQueue = class _GuildQueue {
  constructor(player, options) {
    this.player = player;
    this.options = options;
    __privateAdd(this, _attachListeners);
    __privateAdd(this, _removeListeners);
    __privateAdd(this, _performStart);
    __privateAdd(this, _getNextTrack);
    __privateAdd(this, _performFinish);
    __privateAdd(this, _emitEnd);
    __privateAdd(this, _handleAutoplay);
    __privateAdd(this, _transitioning, false);
    __privateAdd(this, _deleted, false);
    __privateAdd(this, _shuffle, false);
    this.__current = null;
    this.history = new GuildQueueHistory(this);
    this.dispatcher = null;
    this.node = new GuildQueuePlayerNode(this);
    this.filters = new GuildQueueAudioFilters(this);
    this.onBeforeCreateStream = /* @__PURE__ */ __name(async () => null, "onBeforeCreateStream");
    this.onAfterCreateStream = /* @__PURE__ */ __name(async (stream) => ({
      stream,
      type: import_discord_voip4.StreamType.Raw
    }), "onAfterCreateStream");
    this.repeatMode = 0 /* OFF */;
    this.timeouts = new import_utils5.Collection();
    this.stats = new GuildQueueStatistics(this);
    this.tasksQueue = new AsyncQueue();
    this.syncedLyricsProvider = new SyncedLyricsProvider(this);
    this.tracks = new import_utils5.Queue(options.queueStrategy);
    if (TypeUtil.isFunction(options.onBeforeCreateStream))
      this.onBeforeCreateStream = options.onBeforeCreateStream;
    if (TypeUtil.isFunction(options.onAfterCreateStream))
      this.onAfterCreateStream = options.onAfterCreateStream;
    if (!TypeUtil.isNullish(options.repeatMode))
      this.repeatMode = options.repeatMode;
    options.selfDeaf ?? (options.selfDeaf = true);
    options.maxSize ?? (options.maxSize = Infinity);
    options.maxHistorySize ?? (options.maxHistorySize = Infinity);
    options.pauseOnEmpty ?? (options.pauseOnEmpty = true);
    if (!TypeUtil.isNullish(this.options.biquad) && !TypeUtil.isBoolean(this.options.biquad)) {
      this.filters._lastFiltersCache.biquad = this.options.biquad;
    }
    if (Array.isArray(this.options.equalizer)) {
      this.filters._lastFiltersCache.equalizer = this.options.equalizer;
    }
    if (Array.isArray(this.options.filterer)) {
      this.filters._lastFiltersCache.filters = this.options.filterer;
    }
    if (TypeUtil.isNumber(this.options.resampler)) {
      this.filters._lastFiltersCache.sampleRate = this.options.resampler;
    }
    if (TypeUtil.isArray(this.options.ffmpegFilters)) {
      this.filters.ffmpeg.setDefaults(this.options.ffmpegFilters);
    }
    if (!TypeUtil.isNumber(options.maxSize)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("[GuildNodeInit.maxSize]", "number", typeof options.maxSize);
    }
    if (!TypeUtil.isNumber(options.maxHistorySize)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("[GuildNodeInit.maxHistorySize]", "number", typeof options.maxHistorySize);
    }
    if (options.maxSize < 1)
      options.maxSize = Infinity;
    if (options.maxHistorySize < 1)
      options.maxHistorySize = Infinity;
    if (this.hasDebugger)
      this.debug(`GuildQueue initialized for guild ${this.options.guild.name} (ID: ${this.options.guild.id})`);
    this.emit(GuildQueueEvent.queueCreate, this);
  }
  /**
   * Estimated duration of this queue in ms
   */
  get estimatedDuration() {
    return this.tracks.store.reduce((a, c) => a + c.durationMS, 0);
  }
  /**
   * Formatted duration of this queue
   */
  get durationFormatted() {
    return Util.buildTimeCode(Util.parseMS(this.estimatedDuration));
  }
  /**
   * The voice receiver for this queue
   */
  get voiceReceiver() {
    return this.dispatcher?.receiver ?? null;
  }
  /**
   * The sync lyrics provider for this queue.
   * @example const lyrics = await player.lyrics.search({ q: 'Alan Walker Faded' });
   * const syncedLyrics = queue.syncedLyrics(lyrics[0]);
   * console.log(syncedLyrics.at(10_000));
   * // subscribe to lyrics change
   * const unsubscribe = syncedLyrics.onChange((lyrics, timestamp) => {
   *    console.log(lyrics, timestamp);
   * });
   * // unsubscribe from lyrics change
   * unsubscribe(); // or
   * syncedLyrics.unsubscribe();
   */
  syncedLyrics(lyrics) {
    this.syncedLyricsProvider.load(lyrics?.syncedLyrics ?? "");
    return this.syncedLyricsProvider;
  }
  /**
   * Write a debug message to this queue
   * @param m The message to write
   */
  debug(m) {
    this.emit(GuildQueueEvent.debug, this, m);
  }
  /**
   * The metadata of this queue
   */
  get metadata() {
    return this.options.metadata;
  }
  set metadata(m) {
    this.options.metadata = m;
  }
  /**
   * Set metadata for this queue
   * @param m Metadata to set
   */
  setMetadata(m) {
    this.options.metadata = m;
  }
  /**
   * Indicates current track of this queue
   */
  get currentTrack() {
    return this.dispatcher?.audioResource?.metadata || this.__current;
  }
  /**
   * Indicates if this queue was deleted previously
   */
  get deleted() {
    return __privateGet(this, _deleted);
  }
  /**
   * The voice channel of this queue
   */
  get channel() {
    return this.dispatcher?.channel || null;
  }
  set channel(c) {
    if (this.dispatcher) {
      if (c) {
        this.dispatcher.channel = c;
      } else {
        this.delete();
      }
    }
  }
  /**
   * The voice connection of this queue
   */
  get connection() {
    return this.dispatcher?.voiceConnection || null;
  }
  /**
   * The guild this queue belongs to
   */
  get guild() {
    return this.options.guild;
  }
  /**
   * The id of this queue
   */
  get id() {
    return this.guild.id;
  }
  /**
   * Set transition mode for this queue
   * @param state The state to set
   */
  setTransitioning(state) {
    __privateSet(this, _transitioning, state);
  }
  /**
   * if this queue is currently under transition mode
   */
  isTransitioning() {
    return __privateGet(this, _transitioning);
  }
  /**
   * Set repeat mode for this queue
   * @param mode The repeat mode to apply
   */
  setRepeatMode(mode) {
    this.repeatMode = mode;
  }
  /**
   * Max size of this queue
   */
  get maxSize() {
    return this.options.maxSize ?? Infinity;
  }
  /**
   * Max size of this queue
   */
  getMaxSize() {
    return this.maxSize;
  }
  /**
   * Gets the size of the queue
   */
  get size() {
    return this.tracks.size;
  }
  /**
   * The size of this queue
   */
  getSize() {
    return this.size;
  }
  /**
   * Max history size of this queue
   */
  get maxHistorySize() {
    return this.options.maxHistorySize ?? Infinity;
  }
  /**
   * Max history size of this queue
   */
  getMaxHistorySize() {
    return this.maxHistorySize;
  }
  /**
   * Set max history size for this queue
   * @param size The size to set
   */
  setMaxHistorySize(size) {
    if (!TypeUtil.isNumber(size)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("size", "number", typeof size);
    }
    if (size < 1)
      size = Infinity;
    this.options.maxHistorySize = size;
  }
  /**
   * Set max size for this queue
   * @param size The size to set
   */
  setMaxSize(size) {
    if (!TypeUtil.isNumber(size)) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("size", "number", typeof size);
    }
    if (size < 1)
      size = Infinity;
    this.options.maxSize = size;
  }
  /**
   * Clear this queue
   */
  clear() {
    this.tracks.clear();
    this.history.clear();
  }
  /**
   * Check if this queue has no tracks left in it
   */
  isEmpty() {
    return this.tracks.size < 1;
  }
  /**
   * Check if this queue is full
   */
  isFull() {
    return this.tracks.size >= this.maxSize;
  }
  /**
   * Get queue capacity
   */
  getCapacity() {
    if (this.isFull())
      return 0;
    const cap = this.maxSize - this.size;
    return cap;
  }
  /**
   * Check if this queue currently holds active audio resource
   */
  isPlaying() {
    return this.dispatcher?.audioResource != null && !this.dispatcher.audioResource.ended;
  }
  /**
   * Add track to the queue. This will emit `audioTracksAdd` when multiple tracks are added, otherwise `audioTrackAdd`.
   * @param track Track or playlist or array of tracks to add
   */
  addTrack(track) {
    const toAdd = track instanceof Playlist ? track.tracks : track;
    const isMulti = Array.isArray(toAdd);
    VALIDATE_QUEUE_CAP(this, toAdd);
    this.tracks.add(toAdd);
    if (isMulti) {
      this.emit(GuildQueueEvent.audioTracksAdd, this, toAdd);
    } else {
      this.emit(GuildQueueEvent.audioTrackAdd, this, toAdd);
    }
  }
  /**
   * Remove a track from queue
   * @param track The track to remove
   */
  removeTrack(track) {
    return this.node.remove(track);
  }
  /**
   * Inserts the track to the given index
   * @param track The track to insert
   * @param index The index to insert the track at (defaults to 0)
   */
  insertTrack(track, index = 0) {
    return this.node.insert(track, index);
  }
  /**
   * Moves a track in the queue
   * @param from The track to move
   * @param to The position to move to
   */
  moveTrack(track, index = 0) {
    return this.node.move(track, index);
  }
  /**
   * Copy a track in the queue
   * @param from The track to clone
   * @param to The position to clone at
   */
  copyTrack(track, index = 0) {
    return this.node.copy(track, index);
  }
  /**
   * Swap two tracks in the queue
   * @param src The first track to swap
   * @param dest The second track to swap
   */
  swapTracks(src, dest) {
    return this.node.swap(src, dest);
  }
  /**
   * Create stream dispatcher from the given connection
   * @param connection The connection to use
   */
  createDispatcher(connection, options = {}) {
    if (connection.state.status === import_discord_voip4.VoiceConnectionStatus.Destroyed) {
      throw Exceptions.ERR_VOICE_CONNECTION_DESTROYED();
    }
    const channel = this.player.client.channels.cache.get(connection.joinConfig.channelId);
    if (!channel)
      throw Exceptions.ERR_NO_VOICE_CHANNEL();
    if (!channel.isVoiceBased())
      throw Exceptions.ERR_INVALID_ARG_TYPE("channel", `VoiceBasedChannel (type ${import_discord3.ChannelType.GuildVoice}/${import_discord3.ChannelType.GuildStageVoice})`, String(channel?.type));
    if (this.dispatcher) {
      __privateMethod(this, _removeListeners, removeListeners_fn).call(this, this.dispatcher);
      this.dispatcher.destroy();
      this.dispatcher = null;
    }
    this.dispatcher = new StreamDispatcher(connection, channel, this, options.timeout ?? this.options.connectionTimeout, options.audioPlayer);
  }
  /**
   * Connect to a voice channel
   * @param channelResolvable The voice channel to connect to
   * @param options Join config
   */
  async connect(channelResolvable, options = {}) {
    const channel = this.player.client.channels.resolve(channelResolvable);
    if (!channel || !channel.isVoiceBased()) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("channel", `VoiceBasedChannel (type ${import_discord3.ChannelType.GuildVoice}/${import_discord3.ChannelType.GuildStageVoice})`, String(channel?.type));
    }
    if (this.hasDebugger)
      this.debug(`Connecting to ${channel.type === import_discord3.ChannelType.GuildStageVoice ? "stage" : "voice"} channel ${channel.name} (ID: ${channel.id})`);
    if (this.dispatcher && channel.id !== this.dispatcher.channel.id) {
      if (this.hasDebugger)
        this.debug("Destroying old connection");
      __privateMethod(this, _removeListeners, removeListeners_fn).call(this, this.dispatcher);
      this.dispatcher.destroy();
      this.dispatcher = null;
    }
    this.dispatcher = await this.player.voiceUtils.connect(channel, {
      deaf: options.deaf ?? this.options.selfDeaf ?? true,
      maxTime: options?.timeout ?? this.options.connectionTimeout ?? 12e4,
      queue: this,
      audioPlayer: options?.audioPlayer,
      group: options.group ?? this.player.client.user?.id
    });
    this.emit(GuildQueueEvent.connection, this);
    if (this.channel.type === import_discord3.ChannelType.GuildStageVoice) {
      await this.channel.guild.members.me.voice.setSuppressed(false).catch(async () => {
        return await this.channel.guild.members.me.voice.setRequestToSpeak(true).catch(Util.noop);
      });
    }
    __privateMethod(this, _attachListeners, attachListeners_fn).call(this, this.dispatcher);
    return this;
  }
  /**
   * Enable shuffle mode for this queue
   * @param dynamic Whether to shuffle the queue dynamically. Defaults to `true`.
   * Dynamic shuffling will shuffle the queue when the current track ends, without mutating the queue.
   * If set to `false`, the queue will be shuffled immediately in-place, which cannot be undone.
   */
  enableShuffle(dynamic = true) {
    if (!dynamic) {
      this.tracks.shuffle();
      return true;
    }
    __privateSet(this, _shuffle, true);
    return true;
  }
  /**
   * Disable shuffle mode for this queue.
   */
  disableShuffle() {
    __privateSet(this, _shuffle, false);
    return true;
  }
  /**
   * Toggle shuffle mode for this queue.
   * @param dynamic Whether to shuffle the queue dynamically. Defaults to `true`.
   * @returns Whether shuffle is enabled or disabled.
   */
  toggleShuffle(dynamic = true) {
    if (dynamic) {
      __privateSet(this, _shuffle, !__privateGet(this, _shuffle));
      return __privateGet(this, _shuffle);
    } else {
      this.tracks.shuffle();
      return true;
    }
  }
  /**
   * Whether shuffle mode is enabled for this queue.
   */
  get isShuffling() {
    return __privateGet(this, _shuffle);
  }
  /**
   * The voice connection latency of this queue
   */
  get ping() {
    return this.connection?.ping.udp ?? -1;
  }
  /**
   * Delete this queue
   */
  delete() {
    if (this.player.nodes.delete(this.id)) {
      __privateSet(this, _deleted, true);
      this.player.events.emit(GuildQueueEvent.queueDelete, this);
      this.node.tasksQueue.cancelAll();
      this.tasksQueue.cancelAll();
    }
  }
  /**
   * Revives this queue
   * @returns
   */
  revive() {
    if (!this.deleted || this.player.nodes.has(this.id))
      return;
    __privateSet(this, _deleted, false);
    this.setTransitioning(false);
    this.player.nodes.cache.set(this.id, this);
    this.player.events.emit(GuildQueueEvent.queueCreate, this);
  }
  /**
   * Set self deaf
   * @param mode On/Off state
   * @param reason Reason
   */
  setSelfDeaf(mode, reason) {
    return this.guild.members.me.voice.setDeaf(mode, reason);
  }
  /**
   * Set self mute
   * @param mode On/Off state
   * @param reason Reason
   */
  setSelfMute(mode, reason) {
    return this.guild.members.me.voice.setMute(mode, reason);
  }
  /**
   * Play a track in this queue
   * @param track The track to be played
   * @param options Player node initialization options
   */
  async play(track, options) {
    if (!this.channel)
      throw Exceptions.ERR_NO_VOICE_CONNECTION();
    return this.player.play(this.channel, track, options);
  }
  /**
   * Emit an event on this queue
   * @param event The event to emit
   * @param args The args for the event
   */
  emit(event, ...args) {
    if (this.deleted)
      return false;
    return this.player.events.emit(event, ...args);
  }
  get hasDebugger() {
    return this.player.events.hasDebugger;
  }
};
_transitioning = new WeakMap();
_deleted = new WeakMap();
_shuffle = new WeakMap();
_attachListeners = new WeakSet();
attachListeners_fn = /* @__PURE__ */ __name(function(dispatcher) {
  dispatcher.on("error", (e) => this.emit(GuildQueueEvent.error, this, e));
  dispatcher.on("debug", (m) => this.hasDebugger && this.emit(GuildQueueEvent.debug, this, m));
  dispatcher.on("finish", (r) => __privateMethod(this, _performFinish, performFinish_fn).call(this, r));
  dispatcher.on("start", (r) => __privateMethod(this, _performStart, performStart_fn).call(this, r));
  dispatcher.on("destroyed", () => {
    __privateMethod(this, _removeListeners, removeListeners_fn).call(this, dispatcher);
    this.dispatcher = null;
  });
  dispatcher.on("dsp", (f) => {
    if (!Object.is(this.filters._lastFiltersCache.filters, f)) {
      this.emit(GuildQueueEvent.dspUpdate, this, this.filters._lastFiltersCache.filters, f);
    }
    this.filters._lastFiltersCache.filters = f;
  });
  dispatcher.on("biquad", (f) => {
    if (this.filters._lastFiltersCache.biquad !== f) {
      this.emit(GuildQueueEvent.biquadFiltersUpdate, this, this.filters._lastFiltersCache.biquad, f);
    }
    this.filters._lastFiltersCache.biquad = f;
  });
  dispatcher.on("eqBands", (f) => {
    if (!Object.is(f, this.filters._lastFiltersCache.equalizer)) {
      this.emit(GuildQueueEvent.equalizerUpdate, this, this.filters._lastFiltersCache.equalizer, f);
    }
    this.filters._lastFiltersCache.equalizer = f;
  });
  dispatcher.on("volume", (f) => {
    if (this.filters._lastFiltersCache.volume !== f)
      this.emit(GuildQueueEvent.volumeChange, this, this.filters._lastFiltersCache.volume, f);
    this.filters._lastFiltersCache.volume = f;
  });
}, "#attachListeners");
_removeListeners = new WeakSet();
removeListeners_fn = /* @__PURE__ */ __name(function(target2) {
  target2.removeAllListeners();
}, "#removeListeners");
_performStart = new WeakSet();
performStart_fn = /* @__PURE__ */ __name(function(resource) {
  const track = resource?.metadata || this.currentTrack;
  const reason = this.isTransitioning() ? "filters" : "normal";
  if (this.hasDebugger)
    this.debug(
      `Player triggered for Track ${JSON.stringify({
        title: track?.title,
        reason
      })}`
    );
  this.emit(GuildQueueEvent.playerTrigger, this, track, reason);
  if (track && !this.isTransitioning())
    this.emit(GuildQueueEvent.playerStart, this, track);
  this.setTransitioning(false);
}, "#performStart");
_getNextTrack = new WeakSet();
getNextTrack_fn = /* @__PURE__ */ __name(function() {
  if (!this.isShuffling) {
    return this.tracks.dispatch();
  }
  const store = this.tracks.store;
  if (!store.length)
    return;
  const track = Util.randomChoice(store);
  this.tracks.removeOne((t) => {
    return t.id === track.id;
  });
  return track;
}, "#getNextTrack");
_performFinish = new WeakSet();
performFinish_fn = /* @__PURE__ */ __name(function(resource) {
  const track = resource?.metadata || this.currentTrack;
  if (this.hasDebugger)
    this.debug(
      `Track ${JSON.stringify({
        title: track?.title,
        isTransitionMode: this.isTransitioning()
      })} was marked as finished`
    );
  if (track && !this.isTransitioning()) {
    this.syncedLyricsProvider.unsubscribe();
    this.syncedLyricsProvider.lyrics.clear();
    if (this.hasDebugger)
      this.debug("Adding track to history and emitting finish event since transition mode is disabled...");
    this.history.push(track);
    this.node.resetProgress();
    this.emit(GuildQueueEvent.playerFinish, this, track);
    if (__privateGet(this, _deleted))
      return __privateMethod(this, _emitEnd, emitEnd_fn).call(this);
    if (this.tracks.size < 1 && this.repeatMode === 0 /* OFF */) {
      if (this.hasDebugger)
        this.debug("No more tracks left in the queue to play and repeat mode is off, initiating #emitEnd()");
      __privateMethod(this, _emitEnd, emitEnd_fn).call(this);
    } else {
      if (this.repeatMode === 1 /* TRACK */) {
        if (this.hasDebugger)
          this.debug("Repeat mode is set to track, repeating last track from the history...");
        this.__current = this.history.tracks.dispatch() || track;
        return this.node.play(this.__current, { queue: false });
      }
      if (this.repeatMode === 2 /* QUEUE */) {
        if (this.hasDebugger)
          this.debug("Repeat mode is set to queue, moving last track from the history to current queue...");
        this.tracks.add(this.history.tracks.dispatch() || track);
      }
      if (!this.tracks.size) {
        if (this.repeatMode === 3 /* AUTOPLAY */) {
          if (this.hasDebugger)
            this.debug("Repeat mode is set to autoplay, initiating autoplay handler...");
          __privateMethod(this, _handleAutoplay, handleAutoplay_fn).call(this, track);
          return;
        }
      } else {
        if (this.hasDebugger)
          this.debug("Initializing next track of the queue...");
        this.__current = __privateMethod(this, _getNextTrack, getNextTrack_fn).call(this);
        this.node.play(this.__current, {
          queue: false
        });
      }
    }
  }
}, "#performFinish");
_emitEnd = new WeakSet();
emitEnd_fn = /* @__PURE__ */ __name(function() {
  this.__current = null;
  this.emit(GuildQueueEvent.emptyQueue, this);
  if (this.options.leaveOnEnd) {
    const tm = (0, import_timers.setTimeout)(() => {
      if (this.isPlaying())
        return clearTimeout(tm);
      this.dispatcher?.disconnect();
    }, this.options.leaveOnEndCooldown).unref();
  }
}, "#emitEnd");
_handleAutoplay = new WeakSet();
handleAutoplay_fn = /* @__PURE__ */ __name(async function(track) {
  try {
    if (this.hasDebugger)
      this.debug(`Autoplay >> Finding related tracks for Track ${track.title} (${track.url}) [ext:${track.extractor?.identifier || "N/A"}]`);
    const tracks = (await track.extractor?.getRelatedTracks(track, this.history))?.tracks || (await this.player.extractors.run(async (ext) => {
      if (this.hasDebugger)
        this.debug(`Autoplay >> Querying extractor ${ext.identifier}`);
      const res = await ext.getRelatedTracks(track, this.history);
      if (!res.tracks.length) {
        if (this.hasDebugger)
          this.debug(`Autoplay >> Extractor ${ext.identifier} failed to provide results.`);
        return false;
      }
      if (this.hasDebugger)
        this.debug(`Autoplay >> Extractor ${ext.identifier} successfully returned results.`);
      return res.tracks;
    }))?.result || [];
    let resolver = Util.noop;
    const donePromise = new Promise((resolve) => resolver = resolve);
    const success = this.emit(GuildQueueEvent.willAutoPlay, this, tracks, resolver);
    if (!success) {
      resolver(
        tracks.length ? (() => {
          const unique = tracks.filter((tr) => !this.history.tracks.find((t) => t.url === tr.url));
          return unique?.[0] ?? Util.randomChoice(tracks.slice(0, 5));
        })() : null
      );
    }
    const nextTrack = await donePromise;
    if (!nextTrack) {
      if (this.hasDebugger)
        this.debug("Autoplay >> No track was found, initiating #emitEnd()");
      throw "No track was found";
    }
    await this.node.play(nextTrack, {
      queue: false,
      seek: 0,
      transitionMode: false
    });
  } catch {
    return __privateMethod(this, _emitEnd, emitEnd_fn).call(this);
  }
}, "#handleAutoplay");
__name(_GuildQueue, "GuildQueue");
var GuildQueue5 = _GuildQueue;

// src/utils/__internal__/_container.ts
var import_utils6 = require("@discord-player/utils");
var instances = new import_utils6.Collection();
var globalRegistry = new import_utils6.Collection();

// src/utils/__internal__/addPlayer.ts
function addPlayer(player) {
  if (instances.has(player.id))
    return true;
  instances.set(player.id, player);
  return instances.has(player.id);
}
__name(addPlayer, "addPlayer");

// src/utils/__internal__/clearPlayer.ts
function clearPlayer(player) {
  return instances.delete(player.id);
}
__name(clearPlayer, "clearPlayer");

// src/utils/__internal__/getPlayers.ts
function getPlayers() {
  return instances.array();
}
__name(getPlayers, "getPlayers");

// src/utils/__internal__/getGlobalRegistry.ts
function getGlobalRegistry() {
  return globalRegistry;
}
__name(getGlobalRegistry, "getGlobalRegistry");

// src/queue/GuildNodeManager.ts
var _GuildNodeManager = class _GuildNodeManager {
  constructor(player) {
    this.player = player;
    this.cache = new import_utils7.Collection();
  }
  /**
   * Create guild queue if it does not exist
   * @param guild The guild which will be the owner of the queue
   * @param options Queue initializer options
   */
  create(guild, options = {}) {
    const server = this.player.client.guilds.resolve(guild);
    if (!server) {
      throw Exceptions.ERR_NO_GUILD("Invalid or unknown guild");
    }
    if (this.cache.has(server.id)) {
      return this.cache.get(server.id);
    }
    options.strategy ?? (options.strategy = "FIFO");
    options.volume ?? (options.volume = 100);
    options.equalizer ?? (options.equalizer = []);
    options.a_filter ?? (options.a_filter = []);
    options.disableHistory ?? (options.disableHistory = false);
    options.leaveOnEmpty ?? (options.leaveOnEmpty = true);
    options.leaveOnEmptyCooldown ?? (options.leaveOnEmptyCooldown = 0);
    options.leaveOnEnd ?? (options.leaveOnEnd = true);
    options.leaveOnEndCooldown ?? (options.leaveOnEndCooldown = 0);
    options.leaveOnStop ?? (options.leaveOnStop = true);
    options.leaveOnStopCooldown ?? (options.leaveOnStopCooldown = 0);
    options.resampler ?? (options.resampler = 48e3);
    options.selfDeaf ?? (options.selfDeaf = true);
    options.connectionTimeout ?? (options.connectionTimeout = this.player.options.connectionTimeout);
    options.bufferingTimeout ?? (options.bufferingTimeout = 1e3);
    options.maxSize ?? (options.maxSize = Infinity);
    options.maxHistorySize ?? (options.maxHistorySize = Infinity);
    options.preferBridgedMetadata ?? (options.preferBridgedMetadata = true);
    options.pauseOnEmpty ?? (options.pauseOnEmpty = true);
    options.disableBiquad ?? (options.disableBiquad = false);
    options.disableEqualizer ?? (options.disableEqualizer = false);
    options.disableFilterer ?? (options.disableFilterer = false);
    options.disableVolume ?? (options.disableVolume = false);
    options.disableResampler ?? (options.disableResampler = true);
    if (getGlobalRegistry().has("@[onBeforeCreateStream]") && !options.onBeforeCreateStream) {
      options.onBeforeCreateStream = getGlobalRegistry().get("@[onBeforeCreateStream]");
    }
    if (getGlobalRegistry().has("@[onAfterCreateStream]") && !options.onAfterCreateStream) {
      options.onAfterCreateStream = getGlobalRegistry().get("@[onAfterCreateStream]");
    }
    const queue = new GuildQueue5(this.player, {
      guild: server,
      queueStrategy: options.strategy,
      volume: options.volume,
      equalizer: options.equalizer,
      filterer: options.a_filter,
      biquad: options.biquad,
      resampler: options.resampler,
      disableHistory: options.disableHistory,
      onBeforeCreateStream: options.onBeforeCreateStream,
      onAfterCreateStream: options.onAfterCreateStream,
      repeatMode: options.repeatMode,
      leaveOnEmpty: options.leaveOnEmpty,
      leaveOnEmptyCooldown: options.leaveOnEmptyCooldown,
      leaveOnEnd: options.leaveOnEnd,
      leaveOnEndCooldown: options.leaveOnEndCooldown,
      leaveOnStop: options.leaveOnStop,
      leaveOnStopCooldown: options.leaveOnStopCooldown,
      metadata: options.metadata,
      connectionTimeout: options.connectionTimeout ?? 12e4,
      selfDeaf: options.selfDeaf,
      ffmpegFilters: options.defaultFFmpegFilters ?? [],
      bufferingTimeout: options.bufferingTimeout,
      noEmitInsert: options.noEmitInsert ?? false,
      preferBridgedMetadata: options.preferBridgedMetadata,
      maxHistorySize: options.maxHistorySize,
      maxSize: options.maxSize,
      pauseOnEmpty: options.pauseOnEmpty,
      disableBiquad: options.disableBiquad,
      disableEqualizer: options.disableEqualizer,
      disableFilterer: options.disableFilterer,
      disableResampler: options.disableResampler,
      disableVolume: options.disableVolume
    });
    this.cache.set(server.id, queue);
    return queue;
  }
  /**
   * Get existing queue
   * @param node Queue resolvable
   */
  get(node) {
    const queue = this.resolve(node);
    if (!queue)
      return null;
    return this.cache.get(queue.id) || null;
  }
  /**
   * Check if a queue exists
   * @param node Queue resolvable
   */
  has(node) {
    const id = node instanceof GuildQueue5 ? node.id : this.player.client.guilds.resolveId(node);
    return this.cache.has(id);
  }
  /**
   * Delete queue
   * @param node Queue resolvable
   */
  delete(node) {
    const queue = this.resolve(node);
    if (!queue) {
      throw Exceptions.ERR_NO_GUILD_QUEUE("Cannot delete non-existing queue");
    }
    queue.setTransitioning(true);
    queue.node.stop(true);
    queue.connection?.removeAllListeners();
    queue.dispatcher?.removeAllListeners();
    queue.dispatcher?.disconnect();
    queue.timeouts.forEach((tm) => clearTimeout(tm));
    queue.history.clear();
    queue.tracks.clear();
    return this.cache.delete(queue.id);
  }
  /**
   * Resolve queue
   * @param node Queue resolvable
   */
  resolve(node) {
    if (node instanceof GuildQueue5) {
      return node;
    }
    return this.cache.get(this.player.client.guilds.resolveId(node));
  }
  /**
   * Resolve queue id
   * @param node Queue resolvable
   */
  resolveId(node) {
    const q = this.resolve(node);
    return q?.id || null;
  }
};
__name(_GuildNodeManager, "GuildNodeManager");
var GuildNodeManager = _GuildNodeManager;

// src/utils/SequentialBucket.ts
var import_promises3 = require("timers/promises");
var _SequentialBucket = class _SequentialBucket {
  constructor() {
    this.limit = 1;
    this.remaining = 1;
    this.resetAfter = 0;
    this.queue = new AsyncQueue();
    this.MAX_RETRIES = 5;
  }
  /**
   * Checks if the bucket is rate limited.
   */
  isRateLimited() {
    return this.remaining <= 0 && Date.now() < this.resetAfter;
  }
  /**
   * Enqueues a request.
   * @param req The request function to enqueue
   */
  async enqueue(req) {
    const entry = this.queue.acquire();
    await entry.getTask();
    try {
      return this._request(req);
    } finally {
      entry.release();
    }
  }
  async _request(req, retries = 0) {
    while (this.isRateLimited()) {
      const reset = this.resetAfter - Date.now();
      await (0, import_promises3.setTimeout)(reset);
    }
    let pass = false;
    try {
      const res = await req();
      this._patchHeaders(res);
      if (res.status === 429) {
        const reset = this.resetAfter - Date.now();
        await (0, import_promises3.setTimeout)(reset);
        return this._request(req);
      }
      if (!res.ok) {
        let err;
        try {
          const body = await res.json();
          const error = new Error(body.message);
          error.name = body.name;
          error.code = body.code;
          err = error;
        } catch {
          err = new Error(`HTTP Error: ${res.status} ${res.statusText}`);
        }
        pass = true;
        throw err;
      }
      return res;
    } catch (e) {
      if (pass)
        throw e;
      const badReq = e instanceof Error && /Error: 4[0-9]{2}/.test(e.message);
      if (!badReq && retries < this.MAX_RETRIES) {
        return this._request(req, ++retries);
      }
      throw e;
    }
  }
  _patchHeaders(res) {
    const limit = Number(res.headers.get("X-RateLimit-Limit"));
    const remaining = Number(res.headers.get("X-RateLimit-Remaining"));
    const resetAfter = Number(res.headers.get("X-RateLimit-Reset")) * 1e3 + Date.now();
    if (!Number.isNaN(limit))
      this.limit = limit;
    if (!Number.isNaN(remaining))
      this.remaining = remaining;
    if (!Number.isNaN(resetAfter))
      this.resetAfter = resetAfter;
  }
};
__name(_SequentialBucket, "SequentialBucket");
var SequentialBucket = _SequentialBucket;

// src/lrclib/LrcLib.ts
var toSnakeCase = /* @__PURE__ */ __name((obj) => {
  const snakeObj = {};
  for (const [key, value] of Object.entries(obj)) {
    if (value == null)
      continue;
    const newKey = key.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);
    snakeObj[newKey] = value;
  }
  return snakeObj;
}, "toSnakeCase");
var createQuery = /* @__PURE__ */ __name((params) => new URLSearchParams(toSnakeCase(params)).toString(), "createQuery");
var _LrcLib = class _LrcLib {
  /**
   * Creates a new LrcLib instance
   * @param {Player} player The player instance
   */
  constructor(player) {
    this.player = player;
    /**
     * The API URL
     */
    this.api = "https://lrclib.net/api";
    /**
     * The request timeout. Default is 15 seconds.
     */
    this.timeout = 15e3;
    /**
     * The request bucket
     */
    this.bucket = new SequentialBucket();
  }
  /**
   * Sets the request timeout
   * @param {number} timeout The timeout in milliseconds
   */
  setRequestTimeout(timeout) {
    this.timeout = timeout;
  }
  /**
   * Sets the retry limit. Default is 5.
   * @param {number} limit The retry limit
   */
  setRetryLimit(limit) {
    this.bucket.MAX_RETRIES = limit;
  }
  /**
   * Gets lyrics
   * @param params The get params
   */
  get(params) {
    const path = `get?${createQuery(params)}`;
    return this.request(path);
  }
  /**
   * Gets lyrics by ID
   * @param id The lyrics ID
   */
  getById(id) {
    return this.request(`get/${id}`);
  }
  /**
   * Gets cached lyrics
   * @param params The get params
   */
  getCached(params) {
    const path = `get-cached?${createQuery(params)}`;
    return this.request(path);
  }
  /**
   * Searches for lyrics
   * @param params The search params
   */
  search(params) {
    if (!params.q && !params.trackName) {
      throw Exceptions.ERR_INVALID_ARG_TYPE("one of q or trackName", "string", [String(params.q), String(params.trackName)].join(", "));
    }
    const path = `search?${createQuery(params)}`;
    return this.request(path);
  }
  /**
   * Requests the API
   * @param path The path
   * @param options The request options
   */
  async request(path, options) {
    let timeout = null;
    const dispatcher = /* @__PURE__ */ __name(() => {
      const controller = new AbortController();
      timeout = setTimeout(() => {
        controller.abort();
      }, this.timeout).unref();
      const { name, version: version2 } = Util.getRuntime();
      const runtimeVersion = name === "unknown" ? version2 : `${name}/${version2}`;
      const init = {
        method: "GET",
        redirect: "follow",
        signal: controller.signal,
        ...options,
        headers: {
          "User-Agent": `Discord-Player/${this.player.version} ${runtimeVersion ?? ""}`.trimEnd(),
          "Content-Type": "application/json",
          ...options?.headers
        }
      };
      this.player.debug(`[LrcLib] Requesting ${path}`);
      return fetch(`${this.api}${path.startsWith("/") ? path : "/" + path}`, init);
    }, "dispatcher");
    const res = await this.bucket.enqueue(dispatcher);
    if (timeout)
      clearTimeout(timeout);
    return res.json();
  }
};
__name(_LrcLib, "LrcLib");
var LrcLib = _LrcLib;

// src/VoiceInterface/VoiceUtils.ts
var import_discord_voip5 = require("discord-voip");
var import_utils8 = require("@discord-player/utils");
var _VoiceUtils = class _VoiceUtils {
  /**
   * The voice utils constructor
   */
  constructor(player) {
    this.player = player;
    /**
     * Voice connection cache to store voice connections of the Player components.
     * This property is deprecated and will be removed in the future.
     * It only exists for compatibility reasons.
     * @deprecated
     */
    this.cache = new import_utils8.Collection();
  }
  /**
   * Joins a voice channel, creating basic stream dispatch manager
   * @param {StageChannel|VoiceChannel} channel The voice channel
   * @param {object} [options] Join options
   * @returns {Promise<StreamDispatcher>}
   */
  async connect(channel, options) {
    if (!options?.queue)
      throw Exceptions.ERR_NO_GUILD_QUEUE();
    const conn = await this.join(channel, options);
    const sub = new StreamDispatcher(conn, channel, options.queue, options.maxTime, options.audioPlayer);
    return sub;
  }
  /**
   * Joins a voice channel
   * @param {StageChannel|VoiceChannel} [channel] The voice/stage channel to join
   * @param {object} [options] Join options
   * @returns {VoiceConnection}
   */
  async join(channel, options) {
    const conn = (0, import_discord_voip5.joinVoiceChannel)({
      guildId: channel.guild.id,
      channelId: channel.id,
      adapterCreator: channel.guild.voiceAdapterCreator,
      selfDeaf: Boolean(options?.deaf),
      debug: this.player.events.listenerCount("debug") > 0,
      group: options?.group
    });
    return conn;
  }
  /**
   * Disconnects voice connection
   * @param {VoiceConnection} connection The voice connection
   * @returns {void}
   */
  disconnect(connection) {
    if (connection instanceof StreamDispatcher)
      connection = connection.voiceConnection;
    try {
      if (connection.state.status !== import_discord_voip5.VoiceConnectionStatus.Destroyed)
        return connection.destroy();
    } catch {
    }
  }
  /**
   * Returns Discord Player voice connection
   * @param {Snowflake} guild The guild id
   * @returns {StreamDispatcher}
   */
  getConnection(guild, group) {
    return (0, import_discord_voip5.getVoiceConnection)(guild, group);
  }
};
__name(_VoiceUtils, "VoiceUtils");
var VoiceUtils = _VoiceUtils;

// src/utils/QueryCache.ts
var DEFAULT_EXPIRY_TIMEOUT = 18e6;
var _defaultCache;
var _QueryCache = class _QueryCache {
  constructor(player, options = {
    checkInterval: DEFAULT_EXPIRY_TIMEOUT
  }) {
    this.player = player;
    this.options = options;
    __privateAdd(this, _defaultCache, /* @__PURE__ */ new Map());
    this.timer = setInterval(this.cleanup.bind(this), this.checkInterval).unref();
  }
  get checkInterval() {
    return this.options.checkInterval ?? DEFAULT_EXPIRY_TIMEOUT;
  }
  async cleanup() {
    for (const [id, value] of __privateGet(this, _defaultCache)) {
      if (value.hasExpired()) {
        __privateGet(this, _defaultCache).delete(id);
      }
    }
  }
  async clear() {
    __privateGet(this, _defaultCache).clear();
  }
  async getData() {
    return [...__privateGet(this, _defaultCache).values()];
  }
  async addData(data) {
    data.tracks.forEach((d) => {
      if (__privateGet(this, _defaultCache).has(d.url))
        return;
      __privateGet(this, _defaultCache).set(d.url, new DiscordPlayerQueryResultCache(d));
    });
  }
  async resolve(context) {
    const result = __privateGet(this, _defaultCache).get(context.query);
    if (!result)
      return new SearchResult(this.player, {
        query: context.query,
        requestedBy: context.requestedBy,
        queryType: context.queryType
      });
    return new SearchResult(this.player, {
      query: context.query,
      tracks: [result.data],
      playlist: null,
      queryType: context.queryType,
      requestedBy: context.requestedBy
    });
  }
};
_defaultCache = new WeakMap();
__name(_QueryCache, "QueryCache");
var QueryCache = _QueryCache;
var _DiscordPlayerQueryResultCache = class _DiscordPlayerQueryResultCache {
  constructor(data, expireAfter = DEFAULT_EXPIRY_TIMEOUT) {
    this.data = data;
    this.expireAfter = DEFAULT_EXPIRY_TIMEOUT;
    if (typeof expireAfter === "number") {
      this.expireAfter = Date.now() + expireAfter;
    }
  }
  hasExpired() {
    if (typeof this.expireAfter !== "number" || isNaN(this.expireAfter) || this.expireAfter < 1)
      return false;
    return Date.now() <= this.expireAfter;
  }
};
__name(_DiscordPlayerQueryResultCache, "DiscordPlayerQueryResultCache");
var DiscordPlayerQueryResultCache = _DiscordPlayerQueryResultCache;

// src/index.ts
__reExport(src_exports, require("@discord-player/ffmpeg"), module.exports);

// src/Player.ts
var import_ffmpeg2 = require("@discord-player/ffmpeg");
var import_discord5 = require("discord.js");
var import_discord_voip6 = require("discord-voip");

// src/DefaultVoiceStateHandler.ts
var import_discord4 = require("discord.js");
async function defaultVoiceStateHandler(player, queue, oldState, newState) {
  if (!queue || !queue.connection || !queue.channel)
    return;
  if (oldState.channelId && !newState.channelId && newState.member?.id === newState.guild.members.me?.id) {
    try {
      queue.delete();
    } catch {
    }
    return void player.events.emit(GuildQueueEvent.disconnect, queue);
  }
  if (queue.options.pauseOnEmpty) {
    const isEmpty = Util.isVoiceEmpty(queue.channel);
    if (isEmpty) {
      queue.node.setPaused(true);
      Reflect.set(queue, "__pausedOnEmpty", true);
      if (queue.hasDebugger) {
        queue.debug("Voice channel is empty and options#pauseOnEmpty is true, pausing...");
      }
    } else {
      if (Reflect.get(queue, "__pausedOnEmpty")) {
        queue.node.setPaused(false);
        Reflect.set(queue, "__pausedOnEmpty", false);
        if (queue.hasDebugger) {
          queue.debug("Voice channel is not empty and options#pauseOnEmpty is true, resuming...");
        }
      }
    }
  }
  if (!oldState.channelId && newState.channelId && newState.member?.id === newState.guild.members.me?.id) {
    if (newState.serverMute != null && oldState.serverMute !== newState.serverMute) {
      queue.node.setPaused(newState.serverMute);
    } else if (newState.channel?.type === import_discord4.ChannelType.GuildStageVoice && newState.suppress != null && oldState.suppress !== newState.suppress) {
      queue.node.setPaused(newState.suppress);
      if (newState.suppress) {
        newState.guild.members.me?.voice.setRequestToSpeak(true).catch(Util.noop);
      }
    }
  }
  if (!newState.channelId && oldState.channelId === queue.channel.id) {
    if (!Util.isVoiceEmpty(queue.channel))
      return;
    const timeout = setTimeout(() => {
      if (!Util.isVoiceEmpty(queue.channel))
        return;
      if (!player.nodes.has(queue.guild.id))
        return;
      if (queue.options.leaveOnEmpty)
        queue.delete();
      player.events.emit(GuildQueueEvent.emptyChannel, queue);
    }, queue.options.leaveOnEmptyCooldown || 0).unref();
    queue.timeouts.set(`empty_${oldState.guild.id}`, timeout);
  }
  if (newState.channelId && newState.channelId === queue.channel.id) {
    const emptyTimeout = queue.timeouts.get(`empty_${oldState.guild.id}`);
    const channelEmpty = Util.isVoiceEmpty(queue.channel);
    if (!channelEmpty && emptyTimeout) {
      clearTimeout(emptyTimeout);
      queue.timeouts.delete(`empty_${oldState.guild.id}`);
      player.events.emit(GuildQueueEvent.channelPopulate, queue);
    }
  }
  if (oldState.channelId && newState.channelId && oldState.channelId !== newState.channelId) {
    if (newState.member?.id === newState.guild.members.me?.id) {
      if (queue.connection && newState.member?.id === newState.guild.members.me?.id)
        queue.channel = newState.channel;
      const emptyTimeout = queue.timeouts.get(`empty_${oldState.guild.id}`);
      const channelEmpty = Util.isVoiceEmpty(queue.channel);
      if (!channelEmpty && emptyTimeout) {
        clearTimeout(emptyTimeout);
        queue.timeouts.delete(`empty_${oldState.guild.id}`);
        player.events.emit(GuildQueueEvent.channelPopulate, queue);
      } else {
        const timeout = setTimeout(() => {
          if (queue.connection && !Util.isVoiceEmpty(queue.channel))
            return;
          if (!player.nodes.has(queue.guild.id))
            return;
          if (queue.options.leaveOnEmpty)
            queue.delete();
          player.events.emit(GuildQueueEvent.emptyChannel, queue);
        }, queue.options.leaveOnEmptyCooldown || 0).unref();
        queue.timeouts.set(`empty_${oldState.guild.id}`, timeout);
      }
    } else {
      if (newState.channelId !== queue.channel.id) {
        const channelEmpty = Util.isVoiceEmpty(queue.channel);
        if (!channelEmpty)
          return;
        if (queue.timeouts.has(`empty_${oldState.guild.id}`))
          return;
        const timeout = setTimeout(() => {
          if (!Util.isVoiceEmpty(queue.channel))
            return;
          if (!player.nodes.has(queue.guild.id))
            return;
          if (queue.options.leaveOnEmpty)
            queue.delete();
          player.events.emit(GuildQueueEvent.emptyChannel, queue);
        }, queue.options.leaveOnEmptyCooldown || 0).unref();
        queue.timeouts.set(`empty_${oldState.guild.id}`, timeout);
      } else {
        const emptyTimeout = queue.timeouts.get(`empty_${oldState.guild.id}`);
        const channelEmpty = Util.isVoiceEmpty(queue.channel);
        if (!channelEmpty && emptyTimeout) {
          clearTimeout(emptyTimeout);
          queue.timeouts.delete(`empty_${oldState.guild.id}`);
          player.events.emit(GuildQueueEvent.channelPopulate, queue);
        }
      }
    }
  }
}
__name(defaultVoiceStateHandler, "defaultVoiceStateHandler");

// src/utils/IPRotator.ts
var import_ip = __toESM(require("ip"));
var _IPBlock = class _IPBlock {
  constructor(block) {
    this.block = block;
    this.usage = 0;
    if (import_ip.default.isV4Format(block.split("/")[0]) && !block.includes("/")) {
      block += "/32";
    } else if (import_ip.default.isV6Format(block.split("/")[0]) && !block.includes("/")) {
      block += "/128";
    }
    this.cidr = import_ip.default.cidr(this.block);
    this.cidrSize = import_ip.default.cidrSubnet(this.block).subnetMaskLength;
  }
  consume() {
    this.usage++;
  }
};
__name(_IPBlock, "IPBlock");
var IPBlock = _IPBlock;
var _retries;
var _IPRotator = class _IPRotator {
  constructor(config) {
    this.config = config;
    this.blocks = [];
    this.failures = /* @__PURE__ */ new Map();
    this.MAX_NEXT_RETRIES = 30;
    __privateAdd(this, _retries, 0);
    config.exclude ?? (config.exclude = []);
    this.blocks = config.blocks.map((block) => new IPBlock(block));
    this.MAX_NEXT_RETRIES = config.maxRetries ?? 10;
  }
  getIP() {
    const block = this.blocks.sort((a, b) => a.usage - b.usage)[0];
    if (!block) {
      throw new Error("No IP blocks available");
    }
    const random = _IPRotator.getRandomIP(block.cidr, block.cidrSize);
    if (this.isFailedOrExcluded(random)) {
      if (__privateWrapper(this, _retries)._++ > this.MAX_NEXT_RETRIES) {
        __privateSet(this, _retries, 0);
        throw new Error("Unable to find an IP that is not excluded");
      }
      return this.getIP();
    }
    __privateSet(this, _retries, 0);
    block.consume();
    return { ip: random, family: import_ip.default.isV4Format(random) ? 4 : 6 };
  }
  isFailedOrExcluded(ip2) {
    return this.failures.has(ip2) || !!this.config.exclude?.includes(ip2);
  }
  addFailed(ip2) {
    const lastFailedCount = this.failures.get(ip2) ?? 0;
    this.failures.set(ip2, lastFailedCount + 1);
  }
  static getRandomIP(address, start, end) {
    const bytes = import_ip.default.toBuffer(address);
    const ipv6 = bytes.length === 16;
    const bytesize = 8;
    start = start || 0;
    end = typeof end !== "undefined" ? end : bytes.length * bytesize;
    for (let i = 0; i < bytes.length; i++) {
      let bit = i * bytesize;
      if (bit + bytesize < start || bit >= end) {
        continue;
      }
      let b = bytes[i];
      for (let n = 0; n < bytesize; n++) {
        if (bit >= start && bit < end) {
          const bitpos = bytesize - n - 1;
          const bitmask = 1 << bitpos;
          if (Math.random() < 0.5) {
            b |= bitmask;
          } else {
            b &= ~bitmask;
          }
        }
        bit++;
      }
      bytes[i] = b;
    }
    const tets = [];
    for (let i = 0; i < bytes.length; i++) {
      if (ipv6) {
        if (i % 2 === 0) {
          tets[i >> 1] = (bytes[i] << bytesize | bytes[i + 1]).toString(16);
        }
      } else {
        tets[i] = bytes[i];
      }
    }
    return tets.join(ipv6 ? ":" : ".");
  }
};
_retries = new WeakMap();
__name(_IPRotator, "IPRotator");
var IPRotator = _IPRotator;

// src/hooks/context/async-context.ts
var import_node_async_hooks = require("async_hooks");
var _Context = class _Context {
  constructor(defaultValue) {
    this.defaultValue = defaultValue;
    this.storage = new import_node_async_hooks.AsyncLocalStorage();
  }
  /**
   * Exit out of this context
   */
  exit(scope) {
    this.storage.exit(scope);
  }
  /**
   * Whether the context is lost
   */
  get isLost() {
    return this.storage.getStore() === void 0;
  }
  /**
   * Get the current value of the context. If the context is lost and no default value is provided, undefined will be returned.
   */
  consume() {
    const data = this.storage.getStore();
    if (data === void 0 && this.defaultValue !== void 0)
      return this.defaultValue;
    return data;
  }
  /**
   * Run a function within the context of this provider
   */
  provide(value, receiver) {
    if (value === void 0) {
      throw new Error("Context value may not be undefined");
    }
    if (typeof receiver !== "function") {
      throw new Error("Context receiver must be a function");
    }
    return this.storage.run(value, receiver);
  }
};
__name(_Context, "Context");
var Context = _Context;
function createContext(defaultValue) {
  return new Context(defaultValue);
}
__name(createContext, "createContext");
function useContext(context) {
  return context.consume();
}
__name(useContext, "useContext");

// src/hooks/common.ts
var preferredInstanceKey = "__discord_player_hook_instance_cache__";
var getPlayer = /* @__PURE__ */ __name(() => {
  return instances.get(preferredInstanceKey) || instances.first() || null;
}, "getPlayer");
function useHooksContext(hookName) {
  const player = getPlayer();
  if (!player)
    throw Exceptions.ERR_ILLEGAL_HOOK_INVOCATION("discord-player", "Player instance must be created before using hooks");
  const context = useContext(player.context);
  if (!context)
    throw Exceptions.ERR_ILLEGAL_HOOK_INVOCATION(hookName, `${hookName} must be called inside a player context created by <Player>.context.provide()`);
  return context;
}
__name(useHooksContext, "useHooksContext");
var getQueue = /* @__PURE__ */ __name((node) => {
  const player = getPlayer();
  if (!player)
    return null;
  return player.nodes.resolve(node) || null;
}, "getQueue");
function createHook(hook) {
  return hook({
    getQueue,
    getPlayer,
    instances
  });
}
__name(createHook, "createHook");

// src/hooks/useHistory.ts
function useHistory(node) {
  const _node = node ?? useHooksContext("useHistory").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return queue.history;
}
__name(useHistory, "useHistory");

// src/hooks/usePlayer.ts
function usePlayer(node) {
  const _node = node ?? useHooksContext("usePlayer").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return queue.node;
}
__name(usePlayer, "usePlayer");

// src/hooks/useQueue.ts
function useQueue(node) {
  const _node = node ?? useHooksContext("useQueue").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return queue;
}
__name(useQueue, "useQueue");

// src/hooks/useMainPlayer.ts
function useMasterPlayer() {
  Util.warn("useMasterPlayer() hook is deprecated, use useMainPlayer() instead.", "DeprecationWarning");
  return useMainPlayer();
}
__name(useMasterPlayer, "useMasterPlayer");
function useMainPlayer() {
  const instance = getPlayer();
  if (!instance) {
    throw Exceptions.ERR_ILLEGAL_HOOK_INVOCATION("useMainPlayer", 'This is likely caused by calling "useMainPlayer" hook before creating a player instance.');
  }
  return instance;
}
__name(useMainPlayer, "useMainPlayer");

// src/hooks/useMetadata.ts
function useMetadata(node) {
  const _node = node ?? useHooksContext("useMetadata").guild;
  const queue = getQueue(_node);
  const setter = /* @__PURE__ */ __name((metadata) => {
    if (queue) {
      if (TypeUtil.isFunction(metadata))
        return queue.setMetadata(metadata(queue.metadata));
      return queue.setMetadata(metadata);
    }
  }, "setter");
  const getter = /* @__PURE__ */ __name(() => {
    return queue?.metadata;
  }, "getter");
  return [getter, setter];
}
__name(useMetadata, "useMetadata");

// src/hooks/useTimeline.ts
function useTimeline(node, options) {
  const _node = node ?? useHooksContext("useTimeline").guild;
  const queue = getQueue(_node);
  if (!queue)
    return null;
  return Object.preventExtensions({
    get timestamp() {
      return queue.node.getTimestamp(options?.ignoreFilters);
    },
    get volume() {
      return queue.node.volume;
    },
    get paused() {
      return queue.node.isPaused();
    },
    get track() {
      return queue.currentTrack;
    },
    pause() {
      return queue.node.pause();
    },
    resume() {
      return queue.node.resume();
    },
    setVolume(vol) {
      return queue.node.setVolume(vol);
    },
    async setPosition(time) {
      return queue.node.seek(time);
    }
  });
}
__name(useTimeline, "useTimeline");

// src/hooks/stream/onAfterCreateStream.ts
function onAfterCreateStream(handler2) {
  getGlobalRegistry().set("@[onAfterCreateStream]", handler2);
}
__name(onAfterCreateStream, "onAfterCreateStream");

// src/hooks/stream/onBeforeCreateStream.ts
function onBeforeCreateStream(handler2) {
  getGlobalRegistry().set("@[onBeforeCreateStream]", handler2);
}
__name(onBeforeCreateStream, "onBeforeCreateStream");

// src/hooks/useVolume.ts
function useVolume(node) {
  const _node = node ?? useHooksContext("useVolume").guild;
  const queue = getQueue(_node);
  const setter = /* @__PURE__ */ __name((volume) => {
    if (queue) {
      if (TypeUtil.isFunction(volume))
        return queue.node.setVolume(volume(queue.node.volume));
      return queue.node.setVolume(volume);
    }
  }, "setter");
  const getter = /* @__PURE__ */ __name(() => {
    return queue?.node.volume;
  }, "getter");
  return [getter, setter];
}
__name(useVolume, "useVolume");

// src/Player.ts
var kSingleton = Symbol("InstanceDiscordPlayerSingleton");
var _lastLatency, _voiceStateUpdateListener, _lagMonitorTimeout, _lagMonitorInterval, _onVoiceStateUpdate, _hooksCtx;
var _Player = class _Player extends PlayerEventsEmitter {
  /**
   * Creates new Discord Player
   * @param {Client} client The Discord Client
   * @param {PlayerInitOptions} [options] The player init options
   */
  constructor(client, options = {}) {
    if (!options.ignoreInstance && kSingleton in _Player)
      return _Player[kSingleton];
    super(["error"]);
    __privateAdd(this, _lastLatency, -1);
    __privateAdd(this, _voiceStateUpdateListener, this.handleVoiceState.bind(this));
    __privateAdd(this, _lagMonitorTimeout, void 0);
    __privateAdd(this, _lagMonitorInterval, void 0);
    __privateAdd(this, _onVoiceStateUpdate, defaultVoiceStateHandler);
    __privateAdd(this, _hooksCtx, null);
    /**
     * The unique identifier of this player instance
     */
    this.id = import_discord5.SnowflakeUtil.generate().toString();
    /**
     * The player nodes (queue) manager
     */
    this.nodes = new GuildNodeManager(this);
    /**
     * The voice api utilities
     */
    this.voiceUtils = new VoiceUtils(this);
    /**
     * The extractors manager
     */
    this.extractors = new ExtractorExecutionContext(this);
    /**
     * The player events channel
     */
    this.events = new PlayerEventsEmitter(["error", "playerError"]);
    /**
     * The route planner
     */
    this.routePlanner = null;
    /**
     * The player version
     */
    this.version = _Player.version;
    /**
     * The lyrics api
     */
    this.lyrics = new LrcLib(this);
    this.client = client;
    try {
      if (!(client instanceof import_discord5.Client)) {
        Util.warn(
          `Client is not an instance of discord.js@${import_discord5.version} client, some things may not work correctly. This can happen due to corrupt dependencies or having multiple installations of discord.js.`,
          "InvalidClientInstance"
        );
      }
      const ibf = this.client.options.intents instanceof import_discord5.IntentsBitField ? this.client.options.intents : new import_discord5.IntentsBitField(this.client.options.intents);
      if (!ibf.has(import_discord5.IntentsBitField.Flags.GuildVoiceStates)) {
        Util.warn('client is missing "GuildVoiceStates" intent', "InvalidIntentsBitField");
      }
    } catch {
    }
    this.options = {
      lockVoiceStateHandler: false,
      blockExtractors: [],
      blockStreamFrom: [],
      connectionTimeout: 2e4,
      lagMonitor: 3e4,
      queryCache: options.queryCache === null ? null : options.queryCache || new QueryCache(this),
      useLegacyFFmpeg: false,
      skipFFmpeg: true,
      probeTimeout: 5e3,
      ...options,
      ytdlOptions: {
        highWaterMark: 1 << 25,
        ...options.ytdlOptions
      }
    };
    this.client.on("voiceStateUpdate", __privateGet(this, _voiceStateUpdateListener));
    if (typeof this.options.lagMonitor === "number" && this.options.lagMonitor > 0) {
      __privateSet(this, _lagMonitorInterval, setInterval(() => {
        const start = performance.now();
        __privateSet(this, _lagMonitorTimeout, setTimeout(() => {
          __privateSet(this, _lastLatency, performance.now() - start);
          if (this.hasDebugger)
            this.debug(`[Lag Monitor] Event loop latency: ${__privateGet(this, _lastLatency)}ms`);
        }, 0).unref());
      }, this.options.lagMonitor).unref());
    }
    if (this.options.ipconfig) {
      this.routePlanner = new IPRotator(this.options.ipconfig);
    }
    addPlayer(this);
    if (!(kSingleton in _Player)) {
      Object.defineProperty(_Player, kSingleton, {
        value: this,
        writable: true,
        configurable: true,
        enumerable: false
      });
    }
  }
  /**
   * The hooks context for this player instance.
   */
  get context() {
    if (!__privateGet(this, _hooksCtx)) {
      __privateSet(this, _hooksCtx, createContext());
    }
    return __privateGet(this, _hooksCtx);
  }
  /**
   * Override default voice state update handler
   * @param handler The handler callback
   */
  onVoiceStateUpdate(handler2) {
    __privateSet(this, _onVoiceStateUpdate, handler2);
  }
  debug(m) {
    return this.emit("debug", m);
  }
  /**
   * Creates discord-player singleton instance.
   * @param client The client that instantiated player
   * @param options Player initializer options
   */
  static singleton(client, options = {}) {
    return new _Player(client, {
      ...options,
      ignoreInstance: false
    });
  }
  /**
   * Creates new discord-player instance.
   * @param client The client that instantiated player
   * @param options Player initializer options
   */
  static create(client, options = {}) {
    return new _Player(client, {
      ...options,
      ignoreInstance: true
    });
  }
  /**
   * Get all active master player instances
   */
  static getAllPlayers() {
    return getPlayers();
  }
  /**
   * Clear all master player instances
   */
  static clearAllPlayers() {
    return instances.clear();
  }
  /**
   * The current query cache provider in use
   */
  get queryCache() {
    return this.options.queryCache ?? null;
  }
  /**
   * Alias to `Player.nodes`.
   */
  get queues() {
    return this.nodes;
  }
  /**
   * Event loop latency in ms. If your bot is laggy and this returns a number above 20ms for example,
   * some expensive task is being executed on the current thread which is slowing down the event loop.
   * @type {number}
   */
  get eventLoopLag() {
    return __privateGet(this, _lastLatency);
  }
  /**
   * Generates statistics that could be useful. Statistics generator is still experimental.
   * @example ```typescript
   * const stats = player.generateStatistics();
   *
   * console.log(stats);
   *
   * // outputs something like
   * // {
   * //   instances: number,
   * //   queuesCount: number,
   * //   queryCacheEnabled: boolean,
   * //   queues: [
   * //      GuildQueueStatisticsMetadata,
   * //      GuildQueueStatisticsMetadata,
   * //      GuildQueueStatisticsMetadata,
   * //      ...
   * //   ]
   * // }
   * ```
   */
  generateStatistics() {
    return {
      instances: instances.size,
      queuesCount: this.queues.cache.size,
      queryCacheEnabled: this.queryCache != null,
      queues: this.queues.cache.map((m) => m.stats.generate())
    };
  }
  /**
   * Destroy every single queues managed by this master player instance
   * @example ```typescript
   * // use me when you want to immediately terminate every single queues in existence 🔪
   * await player.destroy();
   * ```
   */
  async destroy() {
    this.nodes.cache.forEach((node) => node.delete());
    this.client.off("voiceStateUpdate", __privateGet(this, _voiceStateUpdateListener));
    this.removeAllListeners();
    this.events.removeAllListeners();
    await this.extractors.unregisterAll();
    if (__privateGet(this, _lagMonitorInterval))
      clearInterval(__privateGet(this, _lagMonitorInterval));
    if (__privateGet(this, _lagMonitorTimeout))
      clearInterval(__privateGet(this, _lagMonitorTimeout));
    clearPlayer(this);
  }
  _handleVoiceState(oldState, newState) {
    const queue = this.nodes.get(oldState.guild.id);
    if (!queue || !queue.connection || !queue.channel)
      return;
    const wasHandled = this.events.emit(GuildQueueEvent.voiceStateUpdate, queue, oldState, newState);
    if (wasHandled && !this.options.lockVoiceStateHandler)
      return;
    return __privateGet(this, _onVoiceStateUpdate).call(this, this, queue, oldState, newState);
  }
  /**
   * Handles voice state update
   * @param {VoiceState} oldState The old voice state
   * @param {VoiceState} newState The new voice state
   * @returns {void}
   * @example ```typescript
   * // passing voice state update data to this method will trigger voice state handler
   *
   * client.on('voiceStateUpdate', (oldState, newState) => {
   *   // this is definitely a rocket science, right here
   *   player.handleVoiceState(oldState, newState);
   * });
   * ```
   */
  handleVoiceState(oldState, newState) {
    this._handleVoiceState(oldState, newState);
  }
  /**
   * Lock voice state handler. When this method is called, discord-player will keep using the default voice state update handler, even if custom implementation exists.
   */
  lockVoiceStateHandler() {
    this.options.lockVoiceStateHandler = true;
  }
  /**
   * Unlock voice state handler. When this method is called, discord-player will stop using the default voice state update handler if custom implementation exists.
   */
  unlockVoiceStateHandler() {
    this.options.lockVoiceStateHandler = false;
  }
  /**
   * Checks if voice state handler is locked.
   */
  isVoiceStateHandlerLocked() {
    return !!this.options.lockVoiceStateHandler;
  }
  /**
   * Initiate audio player
   * @param channel The voice channel on which the music should be played
   * @param query The track or source to play
   * @param options Options for player
   * @example ```typescript
   * // no need to worry about queue management, just use this method 😄
   * const query = 'this is my super cool search query that I want to play';
   *
   * try {
   *    const { track } = await player.play(voiceChannel, query);
   *   console.log(`🎉 I am playing ${track.title} 🎉`);
   * } catch(e) {
   *   console.log(`😭 Failed to play error oh no:\n\n${e}`);
   * }
   * ```
   */
  async play(channel, query, options = {}) {
    const vc = this.client.channels.resolve(channel);
    if (!vc?.isVoiceBased())
      throw Exceptions.ERR_INVALID_ARG_TYPE("channel", "VoiceBasedChannel", !vc ? "undefined" : `channel type ${vc.type}`);
    const originalResult = query instanceof SearchResult ? query : await this.search(query, options);
    const result = await options.afterSearch?.(originalResult) || originalResult;
    if (result.isEmpty()) {
      throw Exceptions.ERR_NO_RESULT(`No results found for "${query}" (Extractor: ${result.extractor?.identifier || "N/A"})`);
    }
    const queue = this.nodes.create(vc.guild, options.nodeOptions);
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Acquiring an entry...`);
    const entry = queue.tasksQueue.acquire({ signal: options.signal });
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Entry ${entry.id} was acquired successfully!`);
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Waiting for the queue to resolve...`);
    await entry.getTask();
    if (this.hasDebugger)
      this.debug(`[AsyncQueue] Entry ${entry.id} was resolved!`);
    try {
      if (!queue.channel)
        await queue.connect(vc, options.connectionOptions);
      if (!result.playlist) {
        queue.addTrack(result.tracks[0]);
      } else {
        queue.addTrack(result.playlist);
      }
      if (!queue.isPlaying())
        await queue.node.play(null, options.audioPlayerOptions);
    } finally {
      if (this.hasDebugger)
        this.debug(`[AsyncQueue] Releasing an entry from the queue...`);
      queue.tasksQueue.release();
    }
    return {
      track: result.tracks[0],
      extractor: result.extractor,
      searchResult: result,
      queue
    };
  }
  /**
   * Search tracks
   * @param {string | Track | Track[] | Playlist | SearchResult} query The search query
   * @param {SearchOptions} options The search options
   * @returns {Promise<SearchResult>}
   * @example ```typescript
   * const searchQuery = 'pass url or text or discord-player track constructable objects, we got you covered 😎';
   * const result = await player.search(searchQuery);
   *
   * console.log(result); // Logs `SearchResult` object
   * ```
   */
  async search(searchQuery, options = {}) {
    if (searchQuery instanceof SearchResult)
      return searchQuery;
    if (options.requestedBy != null)
      options.requestedBy = this.client.users.resolve(options.requestedBy);
    options.blockExtractors ?? (options.blockExtractors = this.options.blockExtractors);
    options.fallbackSearchEngine ?? (options.fallbackSearchEngine = QueryType.AUTO_SEARCH);
    if (searchQuery instanceof Track) {
      return new SearchResult(this, {
        playlist: searchQuery.playlist || null,
        tracks: [searchQuery],
        query: searchQuery.title,
        extractor: searchQuery.extractor,
        queryType: searchQuery.queryType,
        requestedBy: options.requestedBy
      });
    }
    if (searchQuery instanceof Playlist) {
      return new SearchResult(this, {
        playlist: searchQuery,
        tracks: searchQuery.tracks,
        query: searchQuery.title,
        extractor: searchQuery.tracks[0]?.extractor,
        queryType: QueryType.AUTO,
        requestedBy: options.requestedBy
      });
    }
    if (Array.isArray(searchQuery)) {
      const tracks = searchQuery.filter((t) => t instanceof Track);
      return new SearchResult(this, {
        playlist: null,
        tracks,
        query: "@@#%{{UserLoadedContent}}%#@@",
        extractor: null,
        queryType: QueryType.AUTO,
        requestedBy: options.requestedBy
      });
    }
    if (this.hasDebugger)
      this.debug(`Searching ${searchQuery}`);
    let extractor = null, protocol = null;
    options.searchEngine ?? (options.searchEngine = QueryType.AUTO);
    options.fallbackSearchEngine ?? (options.fallbackSearchEngine = QueryType.AUTO_SEARCH);
    if (this.hasDebugger)
      this.debug(`Search engine set to ${options.searchEngine}, fallback search engine set to ${options.fallbackSearchEngine}`);
    if (/^\w+:/.test(searchQuery)) {
      const [protocolName, ...query2] = searchQuery.split(":");
      if (this.hasDebugger)
        this.debug(`Protocol ${protocolName} detected in query`);
      const matchingExtractor = this.extractors.store.find((e) => !this.extractors.isDisabled(e.identifier) && e.protocols.includes(protocolName));
      if (matchingExtractor) {
        if (this.hasDebugger)
          this.debug(`Protocol ${protocolName} is supported by ${matchingExtractor.identifier} extractor!`);
        extractor = matchingExtractor;
        searchQuery = query2.join(":");
        protocol = protocolName;
      } else {
        if (this.hasDebugger)
          this.debug(`Could not find an extractor that supports ${protocolName} protocol. Falling back to default behavior...`);
      }
    }
    const redirected = await QueryResolver.preResolve(searchQuery);
    const { type: queryType, query } = options.searchEngine === QueryType.AUTO ? QueryResolver.resolve(redirected, options.fallbackSearchEngine) : { type: options.searchEngine, query: redirected };
    if (this.hasDebugger)
      this.debug(`Query type identified as ${queryType}${extractor && protocol ? " but might not be used due to the presence of protocol" : ""}`);
    if (options.searchEngine.startsWith("ext:")) {
      if (this.hasDebugger)
        this.debug(`Forcing ${options.searchEngine.substring(4)} extractor...`);
      extractor = this.extractors.get(options.searchEngine.substring(4));
      if (!extractor)
        return new SearchResult(this, {
          query,
          queryType,
          extractor,
          requestedBy: options.requestedBy
        });
    }
    if (!extractor) {
      if (!options.ignoreCache) {
        if (this.hasDebugger)
          this.debug(`Checking cache...`);
        const res2 = await this.queryCache?.resolve({
          query,
          queryType,
          requestedBy: options.requestedBy
        });
        if (res2?.hasTracks()) {
          if (this.hasDebugger)
            this.debug(`Cache hit for query ${query}`);
          return res2;
        }
        if (this.hasDebugger)
          this.debug(`Cache miss for query ${query}`);
      }
      if (this.hasDebugger)
        this.debug(`Executing extractors...`);
      extractor = (await this.extractors.run(async (ext) => {
        if (options.blockExtractors?.includes(ext.identifier))
          return false;
        return ext.validate(query, queryType);
      }))?.extractor || null;
    }
    if (!extractor) {
      if (this.hasDebugger)
        this.debug("Failed to find appropriate extractor");
      return new SearchResult(this, {
        query,
        queryType,
        requestedBy: options.requestedBy
      });
    }
    if (this.hasDebugger)
      this.debug(`Executing metadata query using ${extractor.identifier} extractor...`);
    const res = await extractor.handle(query, {
      type: queryType,
      requestedBy: options.requestedBy,
      requestOptions: options.requestOptions,
      protocol
    }).catch(() => null);
    if (res) {
      if (this.hasDebugger)
        this.debug("Metadata query was successful!");
      const result2 = new SearchResult(this, {
        query,
        queryType,
        playlist: res.playlist,
        tracks: res.tracks,
        extractor,
        requestedBy: options.requestedBy
      });
      if (!options.ignoreCache) {
        if (this.hasDebugger)
          this.debug(`Adding data to cache...`);
        await this.queryCache?.addData(result2);
      }
      return result2;
    }
    if (this.hasDebugger)
      this.debug("Failed to find result using appropriate extractor. Querying all extractors...");
    const result = await this.extractors.run(
      async (ext) => !options.blockExtractors?.includes(ext.identifier) && await ext.validate(query) && ext.handle(query, {
        type: queryType,
        requestedBy: options.requestedBy,
        requestOptions: options.requestOptions,
        protocol
      })
    );
    if (!result?.result) {
      if (this.hasDebugger)
        this.debug(`Failed to query metadata query using ${result?.extractor.identifier || "N/A"} extractor.`);
      return new SearchResult(this, {
        query,
        queryType,
        requestedBy: options.requestedBy,
        extractor: result?.extractor
      });
    }
    if (this.hasDebugger)
      this.debug(`Metadata query was successful using ${result.extractor.identifier}!`);
    const data = new SearchResult(this, {
      query,
      queryType,
      playlist: result.result.playlist,
      tracks: result.result.tracks,
      extractor: result.extractor,
      requestedBy: options.requestedBy
    });
    if (!options.ignoreCache) {
      if (this.hasDebugger)
        this.debug(`Adding data to cache...`);
      await this.queryCache?.addData(data);
    }
    return data;
  }
  /**
   * Generates a report of the dependencies used by the `discord-voip` module. Useful for debugging.
   * @example ```typescript
   * console.log(player.scanDeps());
   * // -> logs dependencies report
   * ```
   * @returns {string}
   */
  scanDeps() {
    const line = "-".repeat(50);
    const runtime = "Bun" in globalThis ? "Bun" : "Deno" in globalThis ? "Deno" : "Node";
    const depsReport = [
      "Discord Player",
      line,
      `- discord-player: ${_Player.version}`,
      `- discord-voip: ${import_discord_voip6.version}`,
      `- discord.js: ${import_discord5.version}`,
      `- Node version: ${process.version} (Detected Runtime: ${runtime}, Platform: ${process.platform} [${process.arch}])`,
      (() => {
        if (this.options.useLegacyFFmpeg)
          return "- ffmpeg: N/A (using legacy ffmpeg)";
        const info = import_ffmpeg2.FFmpeg.locateSafe();
        if (!info)
          return "FFmpeg/Avconv not found";
        return [`- ffmpeg: ${info.version}`, `- command: ${info.command}`, `- static: ${info.isStatic}`, `- libopus: ${info.metadata.includes("--enable-libopus")}`].join("\n");
      })(),
      "\n",
      "Loaded Extractors:",
      line,
      this.extractors.store.map((m) => {
        return m.identifier;
      }).join("\n") || "N/A",
      "\n\ndiscord-voip",
      (0, import_discord_voip6.generateDependencyReport)()
    ];
    return depsReport.join("\n");
  }
  *[Symbol.iterator]() {
    yield* this.nodes.cache.values();
  }
  /**
   * Creates `Playlist` instance
   * @param data The data to initialize a playlist
   */
  createPlaylist(data) {
    return new Playlist(this, data);
  }
};
_lastLatency = new WeakMap();
_voiceStateUpdateListener = new WeakMap();
_lagMonitorTimeout = new WeakMap();
_lagMonitorInterval = new WeakMap();
_onVoiceStateUpdate = new WeakMap();
_hooksCtx = new WeakMap();
__name(_Player, "Player");
/**
 * The version of discord-player
 */
_Player.version = "6.6.9";
_Player._singletonKey = kSingleton;
var Player = _Player;

// src/index.ts
var import_equalizer3 = require("@discord-player/equalizer");
var import_discord_voip7 = require("discord-voip");
var version = "6.6.9";
if (!import_discord6.version.startsWith("14")) {
  process.emitWarning(`Discord.js v${import_discord6.version} is incompatible with Discord Player v${version}! Please use >=v14.x of Discord.js`);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AF_NIGHTCORE_RATE,
  AF_VAPORWAVE_RATE,
  AFilterGraph,
  AsyncQueue,
  AsyncQueueEntry,
  AudioFilters,
  AudioPlayer,
  BASS_EQ_BANDS,
  BaseExtractor,
  BiquadFilterType,
  Context,
  DiscordPlayerQueryResultCache,
  EqualizerConfigurationPreset,
  ExtractorExecutionContext,
  FFMPEG_ARGS_PIPED,
  FFMPEG_ARGS_STRING,
  FFMPEG_SRATE_REGEX,
  FFmpegFilterer,
  FiltersChain,
  GuildNodeManager,
  GuildQueue,
  GuildQueueAudioFilters,
  GuildQueueEvent,
  GuildQueueHistory,
  GuildQueuePlayerNode,
  GuildQueueStatistics,
  IPBlock,
  IPRotator,
  LrcLib,
  PCMAudioFilters,
  Player,
  PlayerEvent,
  PlayerEventsEmitter,
  Playlist,
  Q_BUTTERWORTH,
  QueryCache,
  QueryResolver,
  QueryType,
  QueueRepeatMode,
  SearchResult,
  SequentialBucket,
  SerializedType,
  StreamDispatcher,
  Track,
  TrackSkipReason,
  TypeUtil,
  Util,
  VALIDATE_QUEUE_CAP,
  VoiceReceiverNode,
  VoiceUtils,
  VolumeTransformer,
  createAudioPlayer,
  createContext,
  createFFmpegStream,
  createHook,
  decode,
  deserialize,
  encode,
  onAfterCreateStream,
  onBeforeCreateStream,
  serialize,
  tryIntoThumbnailString,
  useContext,
  useHistory,
  useMainPlayer,
  useMasterPlayer,
  useMetadata,
  usePlayer,
  useQueue,
  useTimeline,
  useVolume,
  version,
  ...require("@discord-player/ffmpeg")
});
//# sourceMappingURL=data:application/json;base64,